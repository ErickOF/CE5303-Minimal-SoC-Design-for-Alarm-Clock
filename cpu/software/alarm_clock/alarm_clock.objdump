
alarm_clock.elf:     file format elf32-littlenios2
alarm_clock.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002180

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00001100 memsz 0x00001100 flags r-x
    LOAD off    0x00002120 vaddr 0x00003120 paddr 0x00003160 align 2**12
         filesz 0x00000040 memsz 0x00000040 flags rw-
    LOAD off    0x000021a0 vaddr 0x000031a0 paddr 0x000031a0 align 2**12
         filesz 0x00000000 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000ec8  00002180  00002180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000d8  00003048  00003048  00002048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000040  00003120  00003160  00002120  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000012c  000031a0  000031a0  000021a0  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  000032cc  000032cc  00002160  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b8  00000000  00000000  00002188  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002471  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f58  00000000  00000000  000048b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000fe7  00000000  00000000  00005809  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003e4  00000000  00000000  000067f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f29  00000000  00000000  00006bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000fa4  00000000  00000000  00007afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00008aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000288  00000000  00000000  00008ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000a0cd  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000a0d3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000a0d4  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000a0d5  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0000a0d9  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000a0dd  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0000a0e1  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000049  00000000  00000000  0000a0e7  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0007c2d1  00000000  00000000  0000a130  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002180 l    d  .text	00000000 .text
00003048 l    d  .rodata	00000000 .rodata
00003120 l    d  .rwdata	00000000 .rwdata
000031a0 l    d  .bss	00000000 .bss
000032cc l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_clock_bsp//obj/HAL/src/crt0.o
000021b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000021bc l     F .text	0000004c btn_down_respond
00002208 l     F .text	0000004c btn_up_respond
00002254 l     F .text	000000e8 btn_set_respond
0000246c l     F .text	00000164 timer_respond
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000031c8 g     O .bss	00000004 alt_instruction_exception_handler
00002d34 g     F .text	0000002c alt_main
000031cc g     O .bss	00000100 alt_irq
00003160 g       *ABS*	00000000 __flash_rwdata_start
0000315c g     O .rwdata	00000004 UART
000025d0 g     F .text	0000003c init_values
00002f18 g     F .text	00000038 alt_putstr
00002fb0 g     F .text	00000008 altera_nios2_gen2_irq_init
00002000 g     F .entry	0000000c __reset
00003150 g     O .rwdata	00000004 h0_ptr
00002020 g       *ABS*	00000000 __flash_exceptions_start
0000314c g     O .rwdata	00000004 m1_ptr
000031c0 g     O .bss	00000004 alt_argv
0000b120 g       *ABS*	00000000 _gp
00002fb8 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00003140 g     O .rwdata	00000004 s0_ptr
00003134 g     O .rwdata	00000004 down_ptr
00002b04 g     F .text	00000064 .hidden __udivsi3
00003148 g     O .rwdata	00000004 m0_ptr
00002bc0 g     F .text	00000094 alt_irq_register
000031a0 g     O .bss	00000001 untermitent
000032cc g       *ABS*	00000000 __bss_end
000031b0 g     O .bss	00000006 alarm
000031b8 g     O .bss	00000004 alt_irq_active
000020fc g     F .exceptions	00000060 alt_irq_handler
0000312c g     O .rwdata	00000004 swc_alarm
000031a4 g     O .bss	00000001 up_pressed
00003130 g     O .rwdata	00000004 swc_sel
00002fa8 g     F .text	00000004 alt_dcache_flush_all
00003144 g     O .rwdata	00000004 s1_ptr
00003160 g       *ABS*	00000000 __ram_rwdata_end
00003120 g       *ABS*	00000000 __ram_rodata_end
00002b68 g     F .text	00000058 .hidden __umodsi3
000032cc g       *ABS*	00000000 end
0000215c g     F .exceptions	00000024 alt_instruction_exception_entry
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002f74 g     F .text	00000034 altera_avalon_jtag_uart_write
00002d60 g     F .text	00000170 alt_printf
00003138 g     O .rwdata	00000004 up_ptr
00002180 g     F .text	0000003c _start
00002f70 g     F .text	00000004 alt_sys_init
00003154 g     O .rwdata	00000004 h1_ptr
00003122 g     O .rwdata	00000002 time_unit_sel
00003120 g       *ABS*	00000000 __ram_rwdata_start
00003048 g       *ABS*	00000000 __ram_rodata_start
000031aa g     O .bss	00000006 hour
000032cc g       *ABS*	00000000 __alt_stack_base
00002398 g     F .text	00000060 add_second
000031a3 g     O .bss	00000001 down_pressed
000031a6 g     O .bss	00000001 irqtimer_stall
000031a0 g       *ABS*	00000000 __bss_start
0000260c g     F .text	00000400 main
00002000 g       *ABS*	00000000 __alt_mem_RAM
000031bc g     O .bss	00000004 alt_envp
000031a1 g     O .bss	00000001 button_pressed
00002a0c g     F .text	00000084 .hidden __divsi3
0000233c g     F .text	0000005c set_value
00003048 g       *ABS*	00000000 __flash_rodata_start
00003124 g     O .rwdata	00000004 timer_base_ptr
0000313c g     O .rwdata	00000004 set_clock
00002f50 g     F .text	00000020 alt_irq_init
00003128 g     O .rwdata	00000004 alarm_ptr
000031c4 g     O .bss	00000004 alt_argc
00002020 g       .exceptions	00000000 alt_irq_entry
000023f8 g     F .text	00000074 display_hour
00002020 g       *ABS*	00000000 __ram_exceptions_start
00003120 g     O .rwdata	00000001 first
00003160 g       *ABS*	00000000 _edata
000032cc g       *ABS*	00000000 _end
00002180 g       *ABS*	00000000 __ram_exceptions_end
00002a90 g     F .text	00000074 .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
00002020 g     F .exceptions	00000000 alt_exception
000031a8 g     O .bss	00000002 is_activated
0000200c g       .entry	00000000 _exit
000031a2 g     O .bss	00000001 set_pressed
0000302c g     F .text	0000001c strlen
00002ed0 g     F .text	00000048 alt_putchar
00002fac g     F .text	00000004 alt_icache_flush_all
00003158 g     O .rwdata	00000004 alt_priority_mask
000031a5 g     O .bss	00000001 ud_buttons_en
00002c54 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08486014 	ori	at,at,8576
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .exceptions:

00002020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    2020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    2024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    2028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    202c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    2030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    2034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    2038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    203c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    2040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    2044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    2048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    204c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    2050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    2054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    2058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    205c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    2060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    2064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    2068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    206c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    2070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    2074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    2078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    207c:	10000326 	beq	r2,zero,208c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    2080:	20000226 	beq	r4,zero,208c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    2084:	00020fc0 	call	20fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    2088:	00000706 	br	20a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    208c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    2090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    2094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    2098:	000215c0 	call	215c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    209c:	1000021e 	bne	r2,zero,20a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    20a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    20a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    20a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    20ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    20b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    20b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    20b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    20bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    20c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    20c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    20c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    20cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    20d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    20d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    20d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    20dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    20e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    20e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    20e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    20ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    20f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    20f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    20f8:	ef80083a 	eret

000020fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    20fc:	defffe04 	addi	sp,sp,-8
    2100:	dfc00115 	stw	ra,4(sp)
    2104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    2108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    210c:	04000034 	movhi	r16,0
    2110:	840c7304 	addi	r16,r16,12748

  active = alt_irq_pending ();

  do
  {
    i = 0;
    2114:	0005883a 	mov	r2,zero
    mask = 1;
    2118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    211c:	20ca703a 	and	r5,r4,r3
    2120:	28000b26 	beq	r5,zero,2150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    2124:	100490fa 	slli	r2,r2,3
    2128:	8085883a 	add	r2,r16,r2
    212c:	10c00017 	ldw	r3,0(r2)
    2130:	11000117 	ldw	r4,4(r2)
    2134:	183ee83a 	callr	r3
    2138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    213c:	203ff51e 	bne	r4,zero,2114 <_gp+0xffff6ff4>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    2140:	dfc00117 	ldw	ra,4(sp)
    2144:	dc000017 	ldw	r16,0(sp)
    2148:	dec00204 	addi	sp,sp,8
    214c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    2150:	18c7883a 	add	r3,r3,r3
      i++;
    2154:	10800044 	addi	r2,r2,1

    } while (1);
    2158:	003ff006 	br	211c <_gp+0xffff6ffc>

0000215c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    215c:	d0a02a17 	ldw	r2,-32600(gp)
    2160:	10000426 	beq	r2,zero,2174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    2164:	200b883a 	mov	r5,r4
    2168:	000d883a 	mov	r6,zero
    216c:	013fffc4 	movi	r4,-1
    2170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    2174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    2178:	0005883a 	mov	r2,zero
    217c:	f800283a 	ret

Disassembly of section .text:

00002180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2184:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
    2188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    218c:	d6ac4814 	ori	gp,gp,45344
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2194:	108c6814 	ori	r2,r2,12704

    movhi r3, %hi(__bss_end)
    2198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    219c:	18ccb314 	ori	r3,r3,13004

    beq r2, r3, 1f
    21a0:	10c00326 	beq	r2,r3,21b0 <_start+0x30>

0:
    stw zero, (r2)
    21a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    21a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    21ac:	10fffd36 	bltu	r2,r3,21a4 <_gp+0xffff7084>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    21b0:	0002c540 	call	2c54 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    21b4:	0002d340 	call	2d34 <alt_main>

000021b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    21b8:	003fff06 	br	21b8 <_gp+0xffff7098>

000021bc <btn_down_respond>:
 */
static void btn_down_respond(void* context, alt_u32 id) {
	//logica del boton down.

	unsigned int *button_action = (unsigned int*) context;
	*button_action =  IORD_ALTERA_AVALON_PIO_EDGE_CAP(BTN_DOWN_BASE);
    21bc:	00982b04 	movi	r2,24748
    21c0:	10c00037 	ldwio	r3,0(r2)
    21c4:	20c00015 	stw	r3,0(r4)

	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_DOWN_BASE, *button_action);
    21c8:	10c00035 	stwio	r3,0(r2)

	if (!down_pressed) {
    21cc:	d0a020c3 	ldbu	r2,-32637(gp)
    21d0:	10000a1e 	bne	r2,zero,21fc <btn_down_respond+0x40>
		alt_putstr("Button up\n");
    21d4:	01000034 	movhi	r4,0
}

/**
 * Handler for button down interrupt.
 */
static void btn_down_respond(void* context, alt_u32 id) {
    21d8:	deffff04 	addi	sp,sp,-4

	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_DOWN_BASE, *button_action);

	if (!down_pressed) {
		alt_putstr("Button up\n");
    21dc:	210c1204 	addi	r4,r4,12360
}

/**
 * Handler for button down interrupt.
 */
static void btn_down_respond(void* context, alt_u32 id) {
    21e0:	dfc00015 	stw	ra,0(sp)

	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_DOWN_BASE, *button_action);

	if (!down_pressed) {
		alt_putstr("Button up\n");
    21e4:	0002f180 	call	2f18 <alt_putstr>
		down_pressed = TRUE;
    21e8:	00800044 	movi	r2,1
    21ec:	d0a020c5 	stb	r2,-32637(gp)

	} else {
		alt_putstr("Button already set up\n");
	}
}
    21f0:	dfc00017 	ldw	ra,0(sp)
    21f4:	dec00104 	addi	sp,sp,4
    21f8:	f800283a 	ret
	if (!down_pressed) {
		alt_putstr("Button up\n");
		down_pressed = TRUE;

	} else {
		alt_putstr("Button already set up\n");
    21fc:	01000034 	movhi	r4,0
    2200:	210c1504 	addi	r4,r4,12372
    2204:	0002f181 	jmpi	2f18 <alt_putstr>

00002208 <btn_up_respond>:
 */
static void btn_up_respond(void* context, alt_u32 id){
	//logica del boton up.

	unsigned int *button_action = (unsigned int*) context;
	*button_action =  IORD_ALTERA_AVALON_PIO_EDGE_CAP(BTN_UP_BASE);
    2208:	00982704 	movi	r2,24732
    220c:	10c00037 	ldwio	r3,0(r2)
    2210:	20c00015 	stw	r3,0(r4)

	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_UP_BASE, *button_action);
    2214:	10c00035 	stwio	r3,0(r2)

	if (!up_pressed) {
    2218:	d0a02103 	ldbu	r2,-32636(gp)
    221c:	10000a1e 	bne	r2,zero,2248 <btn_up_respond+0x40>
		alt_putstr("Button up\n");
    2220:	01000034 	movhi	r4,0
}

/**
 * Handler for button up interrupt.
 */
static void btn_up_respond(void* context, alt_u32 id){
    2224:	deffff04 	addi	sp,sp,-4

	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_UP_BASE, *button_action);

	if (!up_pressed) {
		alt_putstr("Button up\n");
    2228:	210c1204 	addi	r4,r4,12360
}

/**
 * Handler for button up interrupt.
 */
static void btn_up_respond(void* context, alt_u32 id){
    222c:	dfc00015 	stw	ra,0(sp)

	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_UP_BASE, *button_action);

	if (!up_pressed) {
		alt_putstr("Button up\n");
    2230:	0002f180 	call	2f18 <alt_putstr>
		up_pressed = TRUE;
    2234:	00800044 	movi	r2,1
    2238:	d0a02105 	stb	r2,-32636(gp)
	} else {
		alt_putstr("Button already set up\n");
	}
}
    223c:	dfc00017 	ldw	ra,0(sp)
    2240:	dec00104 	addi	sp,sp,4
    2244:	f800283a 	ret

	if (!up_pressed) {
		alt_putstr("Button up\n");
		up_pressed = TRUE;
	} else {
		alt_putstr("Button already set up\n");
    2248:	01000034 	movhi	r4,0
    224c:	210c1504 	addi	r4,r4,12372
    2250:	0002f181 	jmpi	2f18 <alt_putstr>

00002254 <btn_set_respond>:
	up_pressed = FALSE;
	down_pressed = FALSE;

	//logica del boton set_alarm.
	unsigned int *button_action = (unsigned int*) context;
	*button_action =  IORD_ALTERA_AVALON_PIO_EDGE_CAP(BTN_SET_BASE);
    2254:	00982304 	movi	r2,24716
/**
 * Handler for alarm set button interrupt.
 */
static void btn_set_respond(void* context, alt_u32 id) {

	up_pressed = FALSE;
    2258:	d0202105 	stb	zero,-32636(gp)
	down_pressed = FALSE;
    225c:	d02020c5 	stb	zero,-32637(gp)

	//logica del boton set_alarm.
	unsigned int *button_action = (unsigned int*) context;
	*button_action =  IORD_ALTERA_AVALON_PIO_EDGE_CAP(BTN_SET_BASE);
    2260:	10c00037 	ldwio	r3,0(r2)
    2264:	20c00015 	stw	r3,0(r4)

	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_SET_BASE, *button_action);
    2268:	10c00035 	stwio	r3,0(r2)

	if (!set_pressed) {
    226c:	d0a02083 	ldbu	r2,-32638(gp)
    2270:	10002c1e 	bne	r2,zero,2324 <btn_set_respond+0xd0>
		alt_putstr("Button set\n");
    2274:	01000034 	movhi	r4,0


/**
 * Handler for alarm set button interrupt.
 */
static void btn_set_respond(void* context, alt_u32 id) {
    2278:	deffff04 	addi	sp,sp,-4

	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_SET_BASE, *button_action);

	if (!set_pressed) {
		alt_putstr("Button set\n");
    227c:	210c1b04 	addi	r4,r4,12396


/**
 * Handler for alarm set button interrupt.
 */
static void btn_set_respond(void* context, alt_u32 id) {
    2280:	dfc00015 	stw	ra,0(sp)

	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_SET_BASE, *button_action);

	if (!set_pressed) {
		alt_putstr("Button set\n");
    2284:	0002f180 	call	2f18 <alt_putstr>
		set_pressed = TRUE;
		if (irqtimer_stall) {
    2288:	d0e02183 	ldbu	r3,-32634(gp)
	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_SET_BASE, *button_action);

	if (!set_pressed) {
		alt_putstr("Button set\n");
		set_pressed = TRUE;
    228c:	00800044 	movi	r2,1
    2290:	d0a02085 	stb	r2,-32638(gp)
		if (irqtimer_stall) {
    2294:	18001626 	beq	r3,zero,22f0 <btn_set_respond+0x9c>
			switch(time_unit_sel)
    2298:	d0a0008f 	ldh	r2,-32766(gp)
    229c:	00c000c4 	movi	r3,3
    22a0:	10c00626 	beq	r2,r3,22bc <btn_set_respond+0x68>
    22a4:	01000104 	movi	r4,4
    22a8:	11000726 	beq	r2,r4,22c8 <btn_set_respond+0x74>
    22ac:	01000084 	movi	r4,2
    22b0:	11001f1e 	bne	r2,r4,2330 <btn_set_respond+0xdc>
			{
			case SEC:
				time_unit_sel = MIN;
    22b4:	d0e0008d 	sth	r3,-32766(gp)
    22b8:	00001d06 	br	2330 <btn_set_respond+0xdc>
				break;
			case MIN:
				time_unit_sel = HR;
    22bc:	00800104 	movi	r2,4
    22c0:	d0a0008d 	sth	r2,-32766(gp)
    22c4:	00001a06 	br	2330 <btn_set_respond+0xdc>
				break;
			case HR:
				time_unit_sel = SEC;
    22c8:	00800084 	movi	r2,2
    22cc:	d0a0008d 	sth	r2,-32766(gp)
				irqtimer_stall = FALSE;
    22d0:	d0202185 	stb	zero,-32634(gp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    22d4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    22d8:	00bfff84 	movi	r2,-2
    22dc:	1884703a 	and	r2,r3,r2
    22e0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    22e4:	d0a02617 	ldw	r2,-32616(gp)
    22e8:	10800414 	ori	r2,r2,16
    22ec:	00000806 	br	2310 <btn_set_respond+0xbc>
				alt_irq_enable(TIMER_IRQ);
				break;
			}
		} else {
			irqtimer_stall = TRUE;
    22f0:	d0a02185 	stb	r2,-32634(gp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    22f4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    22f8:	00bfff84 	movi	r2,-2
    22fc:	1884703a 	and	r2,r3,r2
    2300:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2304:	d1202617 	ldw	r4,-32616(gp)
    2308:	00bffbc4 	movi	r2,-17
    230c:	2084703a 	and	r2,r4,r2
    2310:	d0a02615 	stw	r2,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2314:	d0a02617 	ldw	r2,-32616(gp)
    2318:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    231c:	1801703a 	wrctl	status,r3
    2320:	00000306 	br	2330 <btn_set_respond+0xdc>
			alt_irq_disable(TIMER_IRQ);
		}
	} else {
		alt_putstr("Button already set\n");
    2324:	01000034 	movhi	r4,0
    2328:	210c1e04 	addi	r4,r4,12408
    232c:	0002f181 	jmpi	2f18 <alt_putstr>
	}
}
    2330:	dfc00017 	ldw	ra,0(sp)
    2334:	dec00104 	addi	sp,sp,4
    2338:	f800283a 	ret

0000233c <set_value>:

/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
    233c:	defffc04 	addi	sp,sp,-16
    2340:	dc000015 	stw	r16,0(sp)
	*seg1 = (unsigned char) value / 10;
    2344:	24003fcc 	andi	r16,r4,255

/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
    2348:	dc800215 	stw	r18,8(sp)
	*seg1 = (unsigned char) value / 10;
    234c:	8009883a 	mov	r4,r16

/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
    2350:	2825883a 	mov	r18,r5
	*seg1 = (unsigned char) value / 10;
    2354:	01400284 	movi	r5,10

/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
    2358:	dfc00315 	stw	ra,12(sp)
    235c:	dc400115 	stw	r17,4(sp)
    2360:	3023883a 	mov	r17,r6
	*seg1 = (unsigned char) value / 10;
    2364:	0002b040 	call	2b04 <__udivsi3>
    2368:	90800005 	stb	r2,0(r18)
	*seg0 = (unsigned char) value % 10;
    236c:	01400284 	movi	r5,10
    2370:	8009883a 	mov	r4,r16
    2374:	0002b680 	call	2b68 <__umodsi3>
    2378:	88800005 	stb	r2,0(r17)

	return 0;
}
    237c:	0005883a 	mov	r2,zero
    2380:	dfc00317 	ldw	ra,12(sp)
    2384:	dc800217 	ldw	r18,8(sp)
    2388:	dc400117 	ldw	r17,4(sp)
    238c:	dc000017 	ldw	r16,0(sp)
    2390:	dec00404 	addi	sp,sp,16
    2394:	f800283a 	ret

00002398 <add_second>:
 */
void add_second()
{
//	if (sel == 0) {
	// Add a second
	hour[0]++;
    2398:	d0a0228b 	ldhu	r2,-32630(gp)

	if (hour[0] == 60)
    239c:	01000f04 	movi	r4,60
 */
void add_second()
{
//	if (sel == 0) {
	// Add a second
	hour[0]++;
    23a0:	10800044 	addi	r2,r2,1

	if (hour[0] == 60)
    23a4:	10ffffcc 	andi	r3,r2,65535
    23a8:	19000226 	beq	r3,r4,23b4 <add_second+0x1c>
 */
void add_second()
{
//	if (sel == 0) {
	// Add a second
	hour[0]++;
    23ac:	d0a0228d 	sth	r2,-32630(gp)
    23b0:	f800283a 	ret

	if (hour[0] == 60)
	{
		hour[0] = 0;
		hour[1]++;
    23b4:	d0a0230b 	ldhu	r2,-32628(gp)
	// Add a second
	hour[0]++;

	if (hour[0] == 60)
	{
		hour[0] = 0;
    23b8:	d020228d 	sth	zero,-32630(gp)
		hour[1]++;
    23bc:	10800044 	addi	r2,r2,1

		if (hour[1] == 60)
    23c0:	113fffcc 	andi	r4,r2,65535
    23c4:	20c00226 	beq	r4,r3,23d0 <add_second+0x38>
	hour[0]++;

	if (hour[0] == 60)
	{
		hour[0] = 0;
		hour[1]++;
    23c8:	d0a0230d 	sth	r2,-32628(gp)
    23cc:	f800283a 	ret

		if (hour[1] == 60)
		{
			hour[1] = 0;
			hour[2]++;
    23d0:	d0a0238b 	ldhu	r2,-32626(gp)
		hour[0] = 0;
		hour[1]++;

		if (hour[1] == 60)
		{
			hour[1] = 0;
    23d4:	d020230d 	sth	zero,-32628(gp)
			hour[2]++;

			if (hour[2] == 24)
    23d8:	00c00604 	movi	r3,24
		hour[1]++;

		if (hour[1] == 60)
		{
			hour[1] = 0;
			hour[2]++;
    23dc:	10800044 	addi	r2,r2,1

			if (hour[2] == 24)
    23e0:	113fffcc 	andi	r4,r2,65535
    23e4:	20c00226 	beq	r4,r3,23f0 <add_second+0x58>
		hour[1]++;

		if (hour[1] == 60)
		{
			hour[1] = 0;
			hour[2]++;
    23e8:	d0a0238d 	sth	r2,-32626(gp)
    23ec:	f800283a 	ret

			if (hour[2] == 24)
			{
				hour[2] = 0;
    23f0:	d020238d 	sth	zero,-32626(gp)
    23f4:	f800283a 	ret

000023f8 <display_hour>:
	}
}

void display_hour()
{
	alt_printf("%x %x : %x %x : %x %x\n", *h1_ptr, *h0_ptr, *m1_ptr, *m0_ptr,
    23f8:	d0a00d17 	ldw	r2,-32716(gp)
		}
	}
}

void display_hour()
{
    23fc:	defffc04 	addi	sp,sp,-16
    2400:	dfc00315 	stw	ra,12(sp)
	alt_printf("%x %x : %x %x : %x %x\n", *h1_ptr, *h0_ptr, *m1_ptr, *m0_ptr,
    2404:	11400003 	ldbu	r5,0(r2)
    2408:	d0a00c17 	ldw	r2,-32720(gp)
									   *s1_ptr, *s0_ptr);
    240c:	d0e00917 	ldw	r3,-32732(gp)
    2410:	d1200817 	ldw	r4,-32736(gp)
	}
}

void display_hour()
{
	alt_printf("%x %x : %x %x : %x %x\n", *h1_ptr, *h0_ptr, *m1_ptr, *m0_ptr,
    2414:	11800003 	ldbu	r6,0(r2)
    2418:	d0a00b17 	ldw	r2,-32724(gp)
    241c:	29403fcc 	andi	r5,r5,255
    2420:	31803fcc 	andi	r6,r6,255
    2424:	11c00003 	ldbu	r7,0(r2)
    2428:	d0a00a17 	ldw	r2,-32728(gp)
    242c:	39c03fcc 	andi	r7,r7,255
    2430:	10800003 	ldbu	r2,0(r2)
									   *s1_ptr, *s0_ptr);
    2434:	18c00003 	ldbu	r3,0(r3)
    2438:	21000003 	ldbu	r4,0(r4)
	}
}

void display_hour()
{
	alt_printf("%x %x : %x %x : %x %x\n", *h1_ptr, *h0_ptr, *m1_ptr, *m0_ptr,
    243c:	10803fcc 	andi	r2,r2,255
    2440:	18c03fcc 	andi	r3,r3,255
    2444:	21003fcc 	andi	r4,r4,255
    2448:	d9000215 	stw	r4,8(sp)
    244c:	01000034 	movhi	r4,0
    2450:	d8c00115 	stw	r3,4(sp)
    2454:	d8800015 	stw	r2,0(sp)
    2458:	210c2304 	addi	r4,r4,12428
    245c:	0002d600 	call	2d60 <alt_printf>
									   *s1_ptr, *s0_ptr);
}
    2460:	dfc00317 	ldw	ra,12(sp)
    2464:	dec00404 	addi	sp,sp,16
    2468:	f800283a 	ret

0000246c <timer_respond>:

/**
 * Handler for timer interrupt.
 */
static void timer_respond(void* context){
    246c:	defffc04 	addi	sp,sp,-16
    2470:	dfc00315 	stw	ra,12(sp)
    2474:	dc800215 	stw	r18,8(sp)
    2478:	dc400115 	stw	r17,4(sp)
    247c:	dc000015 	stw	r16,0(sp)

	set_pressed = FALSE;
    2480:	d0202085 	stb	zero,-32638(gp)
	ud_buttons_en = FALSE;
    2484:	d0202145 	stb	zero,-32635(gp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2488:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    248c:	00bfff84 	movi	r2,-2
    2490:	2086703a 	and	r3,r4,r2
    2494:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2498:	d1602617 	ldw	r5,-32616(gp)
    249c:	00fffec4 	movi	r3,-5
    24a0:	28c6703a 	and	r3,r5,r3
    24a4:	d0e02615 	stw	r3,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    24a8:	d0e02617 	ldw	r3,-32616(gp)
    24ac:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    24b0:	2001703a 	wrctl	status,r4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    24b4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    24b8:	1884703a 	and	r2,r3,r2
    24bc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    24c0:	d1202617 	ldw	r4,-32616(gp)
    24c4:	00bffdc4 	movi	r2,-9
    24c8:	2084703a 	and	r2,r4,r2
    24cc:	d0a02615 	stw	r2,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    24d0:	d0a02617 	ldw	r2,-32616(gp)
    24d4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    24d8:	1801703a 	wrctl	status,r3

	alt_irq_disable(BTN_UP_IRQ);
	alt_irq_disable(BTN_DOWN_IRQ);

	/* Acknowledge interrupt by clearing status register */
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0);
    24dc:	00983804 	movi	r2,24800
    24e0:	10000035 	stwio	zero,0(r2)

	add_second();
    24e4:	00023980 	call	2398 <add_second>
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    24e8:	d4202283 	ldbu	r16,-32630(gp)
	/* Acknowledge interrupt by clearing status register */
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0);

	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
    24ec:	d4a00917 	ldw	r18,-32732(gp)
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    24f0:	01400284 	movi	r5,10
    24f4:	8009883a 	mov	r4,r16
    24f8:	0002b040 	call	2b04 <__udivsi3>
	/* Acknowledge interrupt by clearing status register */
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0);

	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
    24fc:	d4600817 	ldw	r17,-32736(gp)
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
    2500:	8009883a 	mov	r4,r16
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    2504:	90800005 	stb	r2,0(r18)
	*seg0 = (unsigned char) value % 10;
    2508:	01400284 	movi	r5,10
    250c:	0002b680 	call	2b68 <__umodsi3>
    2510:	88800005 	stb	r2,0(r17)
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    2514:	d4202303 	ldbu	r16,-32628(gp)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0);

	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
    2518:	d4a00b17 	ldw	r18,-32724(gp)
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    251c:	01400284 	movi	r5,10
    2520:	8009883a 	mov	r4,r16
    2524:	0002b040 	call	2b04 <__udivsi3>
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0);

	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
    2528:	d4600a17 	ldw	r17,-32728(gp)
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
    252c:	8009883a 	mov	r4,r16
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    2530:	90800005 	stb	r2,0(r18)
	*seg0 = (unsigned char) value % 10;
    2534:	01400284 	movi	r5,10
    2538:	0002b680 	call	2b68 <__umodsi3>
    253c:	88800005 	stb	r2,0(r17)
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    2540:	d4202383 	ldbu	r16,-32626(gp)

	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
	set_value(hour[2], h1_ptr, h0_ptr);
    2544:	d4a00d17 	ldw	r18,-32716(gp)
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    2548:	01400284 	movi	r5,10
    254c:	8009883a 	mov	r4,r16
    2550:	0002b040 	call	2b04 <__udivsi3>

	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
	set_value(hour[2], h1_ptr, h0_ptr);
    2554:	d4600c17 	ldw	r17,-32720(gp)
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
    2558:	01400284 	movi	r5,10
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    255c:	90800005 	stb	r2,0(r18)
	*seg0 = (unsigned char) value % 10;
    2560:	8009883a 	mov	r4,r16
    2564:	0002b680 	call	2b68 <__umodsi3>
    2568:	88800005 	stb	r2,0(r17)

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
	set_value(hour[2], h1_ptr, h0_ptr);

	if (*swc_alarm && hour[2] == alarm [2] && hour[1] == alarm[1]) {
    256c:	d0a00317 	ldw	r2,-32756(gp)
    2570:	10800003 	ldbu	r2,0(r2)
    2574:	10803fcc 	andi	r2,r2,255
    2578:	10000f26 	beq	r2,zero,25b8 <timer_respond+0x14c>
    257c:	d0e0238b 	ldhu	r3,-32626(gp)
    2580:	d0a0250b 	ldhu	r2,-32620(gp)
    2584:	18800c1e 	bne	r3,r2,25b8 <timer_respond+0x14c>
    2588:	d0e0230b 	ldhu	r3,-32628(gp)
    258c:	d0a0248b 	ldhu	r2,-32622(gp)
    2590:	1880091e 	bne	r3,r2,25b8 <timer_respond+0x14c>
		if (untermitent) {
    2594:	d0e02003 	ldbu	r3,-32640(gp)
    2598:	d0a00217 	ldw	r2,-32760(gp)
    259c:	18000326 	beq	r3,zero,25ac <timer_respond+0x140>
			untermitent = FALSE;
    25a0:	d0202005 	stb	zero,-32640(gp)
			*alarm_ptr = 0;
    25a4:	10000005 	stb	zero,0(r2)
    25a8:	00000306 	br	25b8 <timer_respond+0x14c>
		} else {
			untermitent = TRUE;
    25ac:	00c00044 	movi	r3,1
    25b0:	d0e02005 	stb	r3,-32640(gp)
			*alarm_ptr = 1;
    25b4:	10c00005 	stb	r3,0(r2)
		}
	}

	display_hour();
}
    25b8:	dfc00317 	ldw	ra,12(sp)
    25bc:	dc800217 	ldw	r18,8(sp)
    25c0:	dc400117 	ldw	r17,4(sp)
    25c4:	dc000017 	ldw	r16,0(sp)
    25c8:	dec00404 	addi	sp,sp,16
			untermitent = TRUE;
			*alarm_ptr = 1;
		}
	}

	display_hour();
    25cc:	00023f81 	jmpi	23f8 <display_hour>

000025d0 <init_values>:
}

void init_values()
{
	// Init all pointer in zero
	*h1_ptr = 0;
    25d0:	d0a00d17 	ldw	r2,-32716(gp)
    25d4:	10000005 	stb	zero,0(r2)
	*h0_ptr = 0;
    25d8:	d0a00c17 	ldw	r2,-32720(gp)
    25dc:	10000005 	stb	zero,0(r2)
	*m1_ptr = 0;
    25e0:	d0a00b17 	ldw	r2,-32724(gp)
    25e4:	10000005 	stb	zero,0(r2)
	*m0_ptr = 0;
    25e8:	d0a00a17 	ldw	r2,-32728(gp)
    25ec:	10000005 	stb	zero,0(r2)
	*s1_ptr = 0;
    25f0:	d0a00917 	ldw	r2,-32732(gp)
    25f4:	10000005 	stb	zero,0(r2)
	*s0_ptr = 0;
    25f8:	d0a00817 	ldw	r2,-32736(gp)
    25fc:	10000005 	stb	zero,0(r2)

	// Alarm doesn't sound
	*alarm_ptr = 0;
    2600:	d0a00217 	ldw	r2,-32760(gp)
    2604:	10000005 	stb	zero,0(r2)
    2608:	f800283a 	ret

0000260c <main>:
}

int main()
{ 
	alt_putstr("Welcome to the Alarm Clock\n");
    260c:	01000034 	movhi	r4,0
	// Alarm doesn't sound
	*alarm_ptr = 0;
}

int main()
{ 
    2610:	defffb04 	addi	sp,sp,-20
	alt_putstr("Welcome to the Alarm Clock\n");
    2614:	210c2d04 	addi	r4,r4,12468
	// Alarm doesn't sound
	*alarm_ptr = 0;
}

int main()
{ 
    2618:	dfc00415 	stw	ra,16(sp)
    261c:	dcc00315 	stw	r19,12(sp)
    2620:	dc800215 	stw	r18,8(sp)
    2624:	dc400115 	stw	r17,4(sp)
    2628:	dc000015 	stw	r16,0(sp)
	alt_putstr("Welcome to the Alarm Clock\n");
    262c:	0002f180 	call	2f18 <alt_putstr>

	if (first) {
    2630:	d0a00003 	ldbu	r2,-32768(gp)
    2634:	10000226 	beq	r2,zero,2640 <main+0x34>
		init_values();
    2638:	00025d00 	call	25d0 <init_values>
		first = FALSE;
    263c:	d0200005 	stb	zero,-32768(gp)
 * Buttons init.
 */
static void buttons_init(void){

	//Set alarm button:
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTN_SET_BASE, 0xf);
    2640:	040003c4 	movi	r16,15
    2644:	00982204 	movi	r2,24712
    2648:	14000035 	stwio	r16,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_SET_BASE, 0x0);
    264c:	00982304 	movi	r2,24716
    2650:	10000035 	stwio	zero,0(r2)
	alt_irq_register(BTN_SET_IRQ, BTN_SET_BASE, btn_set_respond);
    2654:	01800034 	movhi	r6,0
    2658:	31889504 	addi	r6,r6,8788
    265c:	01582004 	movi	r5,24704
    2660:	01000044 	movi	r4,1
    2664:	0002bc00 	call	2bc0 <alt_irq_register>

	//Up button:
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTN_UP_BASE, 0xf);
    2668:	00982604 	movi	r2,24728
    266c:	14000035 	stwio	r16,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_UP_BASE, 0x0);
    2670:	00982704 	movi	r2,24732
    2674:	10000035 	stwio	zero,0(r2)
	alt_irq_register(BTN_UP_IRQ, BTN_UP_BASE, btn_up_respond);
    2678:	01800034 	movhi	r6,0
    267c:	31888204 	addi	r6,r6,8712
    2680:	01582404 	movi	r5,24720
    2684:	01000084 	movi	r4,2
    2688:	0002bc00 	call	2bc0 <alt_irq_register>

	//Down button:
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTN_DOWN_BASE, 0xf);
    268c:	00982a04 	movi	r2,24744
    2690:	14000035 	stwio	r16,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_DOWN_BASE, 0x0);
    2694:	00982b04 	movi	r2,24748
    2698:	10000035 	stwio	zero,0(r2)
	alt_irq_register(BTN_DOWN_IRQ, BTN_DOWN_BASE, btn_down_respond);
    269c:	01800034 	movhi	r6,0
    26a0:	31886f04 	addi	r6,r6,8636
    26a4:	01582804 	movi	r5,24736
    26a8:	010000c4 	movi	r4,3
    26ac:	0002bc00 	call	2bc0 <alt_irq_register>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    26b0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    26b4:	00bfff84 	movi	r2,-2
    26b8:	2086703a 	and	r3,r4,r2
    26bc:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    26c0:	d1602617 	ldw	r5,-32616(gp)
    26c4:	00fffec4 	movi	r3,-5
    26c8:	28c6703a 	and	r3,r5,r3
    26cc:	d0e02615 	stw	r3,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    26d0:	d0e02617 	ldw	r3,-32616(gp)
    26d4:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    26d8:	2001703a 	wrctl	status,r4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    26dc:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    26e0:	1884703a 	and	r2,r3,r2
    26e4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    26e8:	d1202617 	ldw	r4,-32616(gp)
    26ec:	00bffdc4 	movi	r2,-9
    26f0:	2084703a 	and	r2,r4,r2
    26f4:	d0a02615 	stw	r2,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    26f8:	d0a02617 	ldw	r2,-32616(gp)
    26fc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2700:	1801703a 	wrctl	status,r3
/**
 * Timer init
 */
static void timer_init(void){
	//Start the values for the timer interrupt.
	IOWR_ALTERA_AVALON_TIMER_CONTROL(timer_base_ptr, ALTERA_AVALON_TIMER_CONTROL_ITO_MSK
    2704:	d0a00117 	ldw	r2,-32764(gp)
    2708:	00c00144 	movi	r3,5
    270c:	10c00135 	stwio	r3,4(r2)
	        | ALTERA_AVALON_TIMER_CONTROL_START_MSK);
	//Init the handler for the timer interrupt.
	alt_irq_register(TIMER_IRQ, TIMER_BASE /*timer_base_ptr*/, timer_respond);
    2710:	01800034 	movhi	r6,0
    2714:	31891b04 	addi	r6,r6,9324
    2718:	01583804 	movi	r5,24800
    271c:	01000104 	movi	r4,4
    2720:	0002bc00 	call	2bc0 <alt_irq_register>
    2724:	d4202284 	addi	r16,gp,-32630
	timer_init();

	while (TRUE)
	{

		if (!ud_buttons_en && set_pressed) {
    2728:	d0a02143 	ldbu	r2,-32635(gp)
    272c:	1000171e 	bne	r2,zero,278c <main+0x180>
    2730:	d0a02083 	ldbu	r2,-32638(gp)
    2734:	10001526 	beq	r2,zero,278c <main+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2738:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    273c:	00bfff84 	movi	r2,-2
    2740:	2086703a 	and	r3,r4,r2
    2744:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    2748:	d0e02617 	ldw	r3,-32616(gp)
    274c:	18c00114 	ori	r3,r3,4
    2750:	d0e02615 	stw	r3,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2754:	d0e02617 	ldw	r3,-32616(gp)
    2758:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    275c:	2001703a 	wrctl	status,r4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2760:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2764:	1884703a 	and	r2,r3,r2
    2768:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    276c:	d0a02617 	ldw	r2,-32616(gp)
    2770:	10800214 	ori	r2,r2,8
    2774:	d0a02615 	stw	r2,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2778:	d0a02617 	ldw	r2,-32616(gp)
    277c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2780:	1801703a 	wrctl	status,r3
			alt_irq_enable(BTN_UP_IRQ);
			alt_irq_enable(BTN_DOWN_IRQ);
			ud_buttons_en = TRUE;
    2784:	00800044 	movi	r2,1
    2788:	d0a02145 	stb	r2,-32635(gp)
		}

		alt_printf("Changing %s\n", *swc_sel == 0 ? "Time" : "Alarm");
    278c:	d0a00417 	ldw	r2,-32752(gp)
    2790:	10800003 	ldbu	r2,0(r2)
    2794:	10803fcc 	andi	r2,r2,255
    2798:	10000326 	beq	r2,zero,27a8 <main+0x19c>
    279c:	01400034 	movhi	r5,0
    27a0:	294c2b04 	addi	r5,r5,12460
    27a4:	00000206 	br	27b0 <main+0x1a4>
    27a8:	01400034 	movhi	r5,0
    27ac:	294c2904 	addi	r5,r5,12452
    27b0:	01000034 	movhi	r4,0
    27b4:	210c3404 	addi	r4,r4,12496
    27b8:	0002d600 	call	2d60 <alt_printf>

		if (up_pressed) {
    27bc:	d0a02103 	ldbu	r2,-32636(gp)
    27c0:	10003026 	beq	r2,zero,2884 <main+0x278>
			if (*swc_sel == 0) {
    27c4:	d0a00417 	ldw	r2,-32752(gp)
    27c8:	01000104 	movi	r4,4
    27cc:	10c00003 	ldbu	r3,0(r2)
    27d0:	d0a0008b 	ldhu	r2,-32766(gp)
    27d4:	18c03fcc 	andi	r3,r3,255
				if (time_unit_sel == HR) {
    27d8:	10bfffcc 	andi	r2,r2,65535
    27dc:	10a0001c 	xori	r2,r2,32768
    27e0:	10a00004 	addi	r2,r2,-32768
		}

		alt_printf("Changing %s\n", *swc_sel == 0 ? "Time" : "Alarm");

		if (up_pressed) {
			if (*swc_sel == 0) {
    27e4:	1800141e 	bne	r3,zero,2838 <main+0x22c>
				if (time_unit_sel == HR) {
    27e8:	1100081e 	bne	r2,r4,280c <main+0x200>
					if (hour[2]<23)
    27ec:	d0a0238b 	ldhu	r2,-32626(gp)
    27f0:	01000584 	movi	r4,22
    27f4:	10ffffcc 	andi	r3,r2,65535
    27f8:	20c00236 	bltu	r4,r3,2804 <main+0x1f8>
						hour[2]++;
    27fc:	10800044 	addi	r2,r2,1
    2800:	00003206 	br	28cc <main+0x2c0>
					else
						hour[2] = 0;
    2804:	d020238d 	sth	zero,-32626(gp)
    2808:	00003c06 	br	28fc <main+0x2f0>
				} else {
					if (hour[time_unit_sel-2] < 59)
    280c:	10bfff84 	addi	r2,r2,-2
    2810:	1085883a 	add	r2,r2,r2
    2814:	8085883a 	add	r2,r16,r2
    2818:	10c0000b 	ldhu	r3,0(r2)
    281c:	01400e84 	movi	r5,58
    2820:	193fffcc 	andi	r4,r3,65535
    2824:	29000236 	bltu	r5,r4,2830 <main+0x224>
						hour[time_unit_sel-2]++;
    2828:	18c00044 	addi	r3,r3,1
    282c:	00003206 	br	28f8 <main+0x2ec>
					else
						hour[time_unit_sel-2] = 0;
    2830:	1000000d 	sth	zero,0(r2)
    2834:	00003106 	br	28fc <main+0x2f0>
				}
				set_value(hour[0], s1_ptr, s0_ptr);
				set_value(hour[1], m1_ptr, m0_ptr);
				set_value(hour[2], h1_ptr, h0_ptr);
			} else {
				if (time_unit_sel == HR) {
    2838:	1100081e 	bne	r2,r4,285c <main+0x250>
					if (alarm[2]<23)
    283c:	d0a0250b 	ldhu	r2,-32620(gp)
    2840:	01000584 	movi	r4,22
    2844:	10ffffcc 	andi	r3,r2,65535
    2848:	20c00236 	bltu	r4,r3,2854 <main+0x248>
						alarm[2]++;
    284c:	10800044 	addi	r2,r2,1
    2850:	00005306 	br	29a0 <main+0x394>
					else
						alarm[2] = 0;
    2854:	d020250d 	sth	zero,-32620(gp)
    2858:	00006006 	br	29dc <main+0x3d0>
				} else if (time_unit_sel == MIN ) {
    285c:	00c000c4 	movi	r3,3
    2860:	10c05b1e 	bne	r2,r3,29d0 <main+0x3c4>
					if (alarm[1] < 59)
    2864:	d0a0248b 	ldhu	r2,-32622(gp)
    2868:	01000e84 	movi	r4,58
    286c:	10ffffcc 	andi	r3,r2,65535
    2870:	20c00236 	bltu	r4,r3,287c <main+0x270>
						alarm[1]++;
    2874:	10800044 	addi	r2,r2,1
    2878:	00005306 	br	29c8 <main+0x3bc>
					else
						alarm[1] = 0;
    287c:	d020248d 	sth	zero,-32622(gp)
    2880:	00005606 	br	29dc <main+0x3d0>
				} else {
					alt_putstr("Can't set an alarm for seconds\n");
				}
				alt_printf("Alarm setted > %x : %x : %x \n", alarm[2], alarm[1], alarm[0]);
			}
		} else if (down_pressed) {
    2884:	d0a020c3 	ldbu	r2,-32637(gp)
    2888:	10005a26 	beq	r2,zero,29f4 <main+0x3e8>
			if (*swc_sel == 0) {
    288c:	d0a00417 	ldw	r2,-32752(gp)
    2890:	01000104 	movi	r4,4
    2894:	10c00003 	ldbu	r3,0(r2)
    2898:	d0a0008b 	ldhu	r2,-32766(gp)
    289c:	18c03fcc 	andi	r3,r3,255
				if (time_unit_sel == HR) {
    28a0:	10bfffcc 	andi	r2,r2,65535
    28a4:	10a0001c 	xori	r2,r2,32768
    28a8:	10a00004 	addi	r2,r2,-32768
					alt_putstr("Can't set an alarm for seconds\n");
				}
				alt_printf("Alarm setted > %x : %x : %x \n", alarm[2], alarm[1], alarm[0]);
			}
		} else if (down_pressed) {
			if (*swc_sel == 0) {
    28ac:	1800351e 	bne	r3,zero,2984 <main+0x378>
				if (time_unit_sel == HR) {
    28b0:	1100081e 	bne	r2,r4,28d4 <main+0x2c8>
					if (hour[2]>0)
    28b4:	d0a0238b 	ldhu	r2,-32626(gp)
    28b8:	10ffffcc 	andi	r3,r2,65535
    28bc:	18000226 	beq	r3,zero,28c8 <main+0x2bc>
						hour[2]--;
    28c0:	10bfffc4 	addi	r2,r2,-1
    28c4:	00000106 	br	28cc <main+0x2c0>
					else
						hour[2] = 23;
    28c8:	008005c4 	movi	r2,23
    28cc:	d0a0238d 	sth	r2,-32626(gp)
    28d0:	00000a06 	br	28fc <main+0x2f0>
				} else {
					if (hour[time_unit_sel-2] > 0)
    28d4:	10bfff84 	addi	r2,r2,-2
    28d8:	1085883a 	add	r2,r2,r2
    28dc:	8085883a 	add	r2,r16,r2
    28e0:	10c0000b 	ldhu	r3,0(r2)
    28e4:	193fffcc 	andi	r4,r3,65535
    28e8:	20000226 	beq	r4,zero,28f4 <main+0x2e8>
						hour[time_unit_sel-2]--;
    28ec:	18ffffc4 	addi	r3,r3,-1
    28f0:	00000106 	br	28f8 <main+0x2ec>
					else
						hour[time_unit_sel-2] = 59;
    28f4:	00c00ec4 	movi	r3,59
    28f8:	10c0000d 	sth	r3,0(r2)
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    28fc:	d4602283 	ldbu	r17,-32630(gp)
					if (hour[time_unit_sel-2] > 0)
						hour[time_unit_sel-2]--;
					else
						hour[time_unit_sel-2] = 59;
				}
				set_value(hour[0], s1_ptr, s0_ptr);
    2900:	d4e00917 	ldw	r19,-32732(gp)
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    2904:	01400284 	movi	r5,10
    2908:	8809883a 	mov	r4,r17
    290c:	0002b040 	call	2b04 <__udivsi3>
					if (hour[time_unit_sel-2] > 0)
						hour[time_unit_sel-2]--;
					else
						hour[time_unit_sel-2] = 59;
				}
				set_value(hour[0], s1_ptr, s0_ptr);
    2910:	d4a00817 	ldw	r18,-32736(gp)
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
    2914:	8809883a 	mov	r4,r17
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    2918:	98800005 	stb	r2,0(r19)
	*seg0 = (unsigned char) value % 10;
    291c:	01400284 	movi	r5,10
    2920:	0002b680 	call	2b68 <__umodsi3>
    2924:	90800005 	stb	r2,0(r18)
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    2928:	d4602303 	ldbu	r17,-32628(gp)
						hour[time_unit_sel-2]--;
					else
						hour[time_unit_sel-2] = 59;
				}
				set_value(hour[0], s1_ptr, s0_ptr);
				set_value(hour[1], m1_ptr, m0_ptr);
    292c:	d4e00b17 	ldw	r19,-32724(gp)
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    2930:	01400284 	movi	r5,10
    2934:	8809883a 	mov	r4,r17
    2938:	0002b040 	call	2b04 <__udivsi3>
						hour[time_unit_sel-2]--;
					else
						hour[time_unit_sel-2] = 59;
				}
				set_value(hour[0], s1_ptr, s0_ptr);
				set_value(hour[1], m1_ptr, m0_ptr);
    293c:	d4a00a17 	ldw	r18,-32728(gp)
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
    2940:	8809883a 	mov	r4,r17
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    2944:	98800005 	stb	r2,0(r19)
	*seg0 = (unsigned char) value % 10;
    2948:	01400284 	movi	r5,10
    294c:	0002b680 	call	2b68 <__umodsi3>
    2950:	90800005 	stb	r2,0(r18)
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    2954:	d4602383 	ldbu	r17,-32626(gp)
					else
						hour[time_unit_sel-2] = 59;
				}
				set_value(hour[0], s1_ptr, s0_ptr);
				set_value(hour[1], m1_ptr, m0_ptr);
				set_value(hour[2], h1_ptr, h0_ptr);
    2958:	d4e00d17 	ldw	r19,-32716(gp)
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    295c:	01400284 	movi	r5,10
    2960:	8809883a 	mov	r4,r17
    2964:	0002b040 	call	2b04 <__udivsi3>
					else
						hour[time_unit_sel-2] = 59;
				}
				set_value(hour[0], s1_ptr, s0_ptr);
				set_value(hour[1], m1_ptr, m0_ptr);
				set_value(hour[2], h1_ptr, h0_ptr);
    2968:	d4a00c17 	ldw	r18,-32720(gp)
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
    296c:	01400284 	movi	r5,10
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    2970:	98800005 	stb	r2,0(r19)
	*seg0 = (unsigned char) value % 10;
    2974:	8809883a 	mov	r4,r17
    2978:	0002b680 	call	2b68 <__umodsi3>
    297c:	90800005 	stb	r2,0(r18)
    2980:	00001c06 	br	29f4 <main+0x3e8>
				}
				set_value(hour[0], s1_ptr, s0_ptr);
				set_value(hour[1], m1_ptr, m0_ptr);
				set_value(hour[2], h1_ptr, h0_ptr);
			} else {
				if (time_unit_sel == HR) {
    2984:	1100081e 	bne	r2,r4,29a8 <main+0x39c>
					if (alarm[2] > 0)
    2988:	d0a0250b 	ldhu	r2,-32620(gp)
    298c:	10ffffcc 	andi	r3,r2,65535
    2990:	18000226 	beq	r3,zero,299c <main+0x390>
						alarm[2]--;
    2994:	10bfffc4 	addi	r2,r2,-1
    2998:	00000106 	br	29a0 <main+0x394>
					else
						alarm[2] = 23;
    299c:	008005c4 	movi	r2,23
    29a0:	d0a0250d 	sth	r2,-32620(gp)
    29a4:	00000d06 	br	29dc <main+0x3d0>
				} else if (time_unit_sel == MIN ) {
    29a8:	00c000c4 	movi	r3,3
    29ac:	10c0081e 	bne	r2,r3,29d0 <main+0x3c4>
					if (alarm[1] > 0)
    29b0:	d0a0248b 	ldhu	r2,-32622(gp)
    29b4:	10ffffcc 	andi	r3,r2,65535
    29b8:	18000226 	beq	r3,zero,29c4 <main+0x3b8>
						alarm[1]--;
    29bc:	10bfffc4 	addi	r2,r2,-1
    29c0:	00000106 	br	29c8 <main+0x3bc>
					else
						alarm[1] = 59;
    29c4:	00800ec4 	movi	r2,59
    29c8:	d0a0248d 	sth	r2,-32622(gp)
    29cc:	00000306 	br	29dc <main+0x3d0>
				} else {
					alt_putstr("Can't set an alarm for seconds\n");
    29d0:	01000034 	movhi	r4,0
    29d4:	210c3804 	addi	r4,r4,12512
    29d8:	0002f180 	call	2f18 <alt_putstr>
				}
				alt_printf("Alarm setted > %x : %x : %x \n", alarm[2], alarm[1], alarm[0]);
    29dc:	d1e0240b 	ldhu	r7,-32624(gp)
    29e0:	d1a0248b 	ldhu	r6,-32622(gp)
    29e4:	d160250b 	ldhu	r5,-32620(gp)
    29e8:	01000034 	movhi	r4,0
    29ec:	210c4004 	addi	r4,r4,12544
    29f0:	0002d600 	call	2d60 <alt_printf>
			}
		}

		up_pressed = FALSE;
    29f4:	d0202105 	stb	zero,-32636(gp)
		down_pressed = FALSE;
    29f8:	d02020c5 	stb	zero,-32637(gp)
		set_pressed = FALSE;
    29fc:	d0202085 	stb	zero,-32638(gp)
		button_pressed = FALSE;
    2a00:	d0202045 	stb	zero,-32639(gp)

		display_hour();
    2a04:	00023f80 	call	23f8 <display_hour>
	}
    2a08:	003f4706 	br	2728 <_gp+0xffff7608>

00002a0c <__divsi3>:
    2a0c:	20001b16 	blt	r4,zero,2a7c <__divsi3+0x70>
    2a10:	000f883a 	mov	r7,zero
    2a14:	28001616 	blt	r5,zero,2a70 <__divsi3+0x64>
    2a18:	200d883a 	mov	r6,r4
    2a1c:	29001a2e 	bgeu	r5,r4,2a88 <__divsi3+0x7c>
    2a20:	00800804 	movi	r2,32
    2a24:	00c00044 	movi	r3,1
    2a28:	00000106 	br	2a30 <__divsi3+0x24>
    2a2c:	10000d26 	beq	r2,zero,2a64 <__divsi3+0x58>
    2a30:	294b883a 	add	r5,r5,r5
    2a34:	10bfffc4 	addi	r2,r2,-1
    2a38:	18c7883a 	add	r3,r3,r3
    2a3c:	293ffb36 	bltu	r5,r4,2a2c <_gp+0xffff790c>
    2a40:	0005883a 	mov	r2,zero
    2a44:	18000726 	beq	r3,zero,2a64 <__divsi3+0x58>
    2a48:	0005883a 	mov	r2,zero
    2a4c:	31400236 	bltu	r6,r5,2a58 <__divsi3+0x4c>
    2a50:	314dc83a 	sub	r6,r6,r5
    2a54:	10c4b03a 	or	r2,r2,r3
    2a58:	1806d07a 	srli	r3,r3,1
    2a5c:	280ad07a 	srli	r5,r5,1
    2a60:	183ffa1e 	bne	r3,zero,2a4c <_gp+0xffff792c>
    2a64:	38000126 	beq	r7,zero,2a6c <__divsi3+0x60>
    2a68:	0085c83a 	sub	r2,zero,r2
    2a6c:	f800283a 	ret
    2a70:	014bc83a 	sub	r5,zero,r5
    2a74:	39c0005c 	xori	r7,r7,1
    2a78:	003fe706 	br	2a18 <_gp+0xffff78f8>
    2a7c:	0109c83a 	sub	r4,zero,r4
    2a80:	01c00044 	movi	r7,1
    2a84:	003fe306 	br	2a14 <_gp+0xffff78f4>
    2a88:	00c00044 	movi	r3,1
    2a8c:	003fee06 	br	2a48 <_gp+0xffff7928>

00002a90 <__modsi3>:
    2a90:	20001716 	blt	r4,zero,2af0 <__modsi3+0x60>
    2a94:	000f883a 	mov	r7,zero
    2a98:	2005883a 	mov	r2,r4
    2a9c:	28001216 	blt	r5,zero,2ae8 <__modsi3+0x58>
    2aa0:	2900162e 	bgeu	r5,r4,2afc <__modsi3+0x6c>
    2aa4:	01800804 	movi	r6,32
    2aa8:	00c00044 	movi	r3,1
    2aac:	00000106 	br	2ab4 <__modsi3+0x24>
    2ab0:	30000a26 	beq	r6,zero,2adc <__modsi3+0x4c>
    2ab4:	294b883a 	add	r5,r5,r5
    2ab8:	31bfffc4 	addi	r6,r6,-1
    2abc:	18c7883a 	add	r3,r3,r3
    2ac0:	293ffb36 	bltu	r5,r4,2ab0 <_gp+0xffff7990>
    2ac4:	18000526 	beq	r3,zero,2adc <__modsi3+0x4c>
    2ac8:	1806d07a 	srli	r3,r3,1
    2acc:	11400136 	bltu	r2,r5,2ad4 <__modsi3+0x44>
    2ad0:	1145c83a 	sub	r2,r2,r5
    2ad4:	280ad07a 	srli	r5,r5,1
    2ad8:	183ffb1e 	bne	r3,zero,2ac8 <_gp+0xffff79a8>
    2adc:	38000126 	beq	r7,zero,2ae4 <__modsi3+0x54>
    2ae0:	0085c83a 	sub	r2,zero,r2
    2ae4:	f800283a 	ret
    2ae8:	014bc83a 	sub	r5,zero,r5
    2aec:	003fec06 	br	2aa0 <_gp+0xffff7980>
    2af0:	0109c83a 	sub	r4,zero,r4
    2af4:	01c00044 	movi	r7,1
    2af8:	003fe706 	br	2a98 <_gp+0xffff7978>
    2afc:	00c00044 	movi	r3,1
    2b00:	003ff106 	br	2ac8 <_gp+0xffff79a8>

00002b04 <__udivsi3>:
    2b04:	200d883a 	mov	r6,r4
    2b08:	2900152e 	bgeu	r5,r4,2b60 <__udivsi3+0x5c>
    2b0c:	28001416 	blt	r5,zero,2b60 <__udivsi3+0x5c>
    2b10:	00800804 	movi	r2,32
    2b14:	00c00044 	movi	r3,1
    2b18:	00000206 	br	2b24 <__udivsi3+0x20>
    2b1c:	10000e26 	beq	r2,zero,2b58 <__udivsi3+0x54>
    2b20:	28000516 	blt	r5,zero,2b38 <__udivsi3+0x34>
    2b24:	294b883a 	add	r5,r5,r5
    2b28:	10bfffc4 	addi	r2,r2,-1
    2b2c:	18c7883a 	add	r3,r3,r3
    2b30:	293ffa36 	bltu	r5,r4,2b1c <_gp+0xffff79fc>
    2b34:	18000826 	beq	r3,zero,2b58 <__udivsi3+0x54>
    2b38:	0005883a 	mov	r2,zero
    2b3c:	31400236 	bltu	r6,r5,2b48 <__udivsi3+0x44>
    2b40:	314dc83a 	sub	r6,r6,r5
    2b44:	10c4b03a 	or	r2,r2,r3
    2b48:	1806d07a 	srli	r3,r3,1
    2b4c:	280ad07a 	srli	r5,r5,1
    2b50:	183ffa1e 	bne	r3,zero,2b3c <_gp+0xffff7a1c>
    2b54:	f800283a 	ret
    2b58:	0005883a 	mov	r2,zero
    2b5c:	f800283a 	ret
    2b60:	00c00044 	movi	r3,1
    2b64:	003ff406 	br	2b38 <_gp+0xffff7a18>

00002b68 <__umodsi3>:
    2b68:	2005883a 	mov	r2,r4
    2b6c:	2900122e 	bgeu	r5,r4,2bb8 <__umodsi3+0x50>
    2b70:	28001116 	blt	r5,zero,2bb8 <__umodsi3+0x50>
    2b74:	01800804 	movi	r6,32
    2b78:	00c00044 	movi	r3,1
    2b7c:	00000206 	br	2b88 <__umodsi3+0x20>
    2b80:	30000c26 	beq	r6,zero,2bb4 <__umodsi3+0x4c>
    2b84:	28000516 	blt	r5,zero,2b9c <__umodsi3+0x34>
    2b88:	294b883a 	add	r5,r5,r5
    2b8c:	31bfffc4 	addi	r6,r6,-1
    2b90:	18c7883a 	add	r3,r3,r3
    2b94:	293ffa36 	bltu	r5,r4,2b80 <_gp+0xffff7a60>
    2b98:	18000626 	beq	r3,zero,2bb4 <__umodsi3+0x4c>
    2b9c:	1806d07a 	srli	r3,r3,1
    2ba0:	11400136 	bltu	r2,r5,2ba8 <__umodsi3+0x40>
    2ba4:	1145c83a 	sub	r2,r2,r5
    2ba8:	280ad07a 	srli	r5,r5,1
    2bac:	183ffb1e 	bne	r3,zero,2b9c <_gp+0xffff7a7c>
    2bb0:	f800283a 	ret
    2bb4:	f800283a 	ret
    2bb8:	00c00044 	movi	r3,1
    2bbc:	003ff706 	br	2b9c <_gp+0xffff7a7c>

00002bc0 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2bc0:	008007c4 	movi	r2,31
    2bc4:	11002136 	bltu	r2,r4,2c4c <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2bc8:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2bcc:	00ffff84 	movi	r3,-2
    2bd0:	38c4703a 	and	r2,r7,r3
    2bd4:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    2bd8:	200490fa 	slli	r2,r4,3
    2bdc:	02000034 	movhi	r8,0
    2be0:	420c7304 	addi	r8,r8,12748
    2be4:	4085883a 	add	r2,r8,r2
    2be8:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    2bec:	11400115 	stw	r5,4(r2)
    2bf0:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    2bf4:	30000726 	beq	r6,zero,2c14 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2bf8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2bfc:	28c6703a 	and	r3,r5,r3
    2c00:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    2c04:	d0e02617 	ldw	r3,-32616(gp)
    2c08:	1104983a 	sll	r2,r2,r4
    2c0c:	10c4b03a 	or	r2,r2,r3
    2c10:	00000706 	br	2c30 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2c14:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2c18:	28c6703a 	and	r3,r5,r3
    2c1c:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2c20:	1104983a 	sll	r2,r2,r4
    2c24:	d0e02617 	ldw	r3,-32616(gp)
    2c28:	0084303a 	nor	r2,zero,r2
    2c2c:	10c4703a 	and	r2,r2,r3
    2c30:	d0a02615 	stw	r2,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2c34:	d0a02617 	ldw	r2,-32616(gp)
    2c38:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2c3c:	2801703a 	wrctl	status,r5
    2c40:	3801703a 	wrctl	status,r7
    2c44:	0005883a 	mov	r2,zero
    2c48:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
    2c4c:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
    2c50:	f800283a 	ret

00002c54 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2c54:	deffff04 	addi	sp,sp,-4
    2c58:	01000034 	movhi	r4,0
    2c5c:	01400034 	movhi	r5,0
    2c60:	dfc00015 	stw	ra,0(sp)
    2c64:	210c4804 	addi	r4,r4,12576
    2c68:	294c5804 	addi	r5,r5,12640

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2c6c:	2140061e 	bne	r4,r5,2c88 <alt_load+0x34>
    2c70:	01000034 	movhi	r4,0
    2c74:	01400034 	movhi	r5,0
    2c78:	21080804 	addi	r4,r4,8224
    2c7c:	29480804 	addi	r5,r5,8224
    2c80:	2140121e 	bne	r4,r5,2ccc <alt_load+0x78>
    2c84:	00000b06 	br	2cb4 <alt_load+0x60>
    2c88:	00c00034 	movhi	r3,0
    2c8c:	18cc5804 	addi	r3,r3,12640
    2c90:	1907c83a 	sub	r3,r3,r4
    2c94:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2c98:	10fff526 	beq	r2,r3,2c70 <_gp+0xffff7b50>
    {
      *to++ = *from++;
    2c9c:	114f883a 	add	r7,r2,r5
    2ca0:	39c00017 	ldw	r7,0(r7)
    2ca4:	110d883a 	add	r6,r2,r4
    2ca8:	10800104 	addi	r2,r2,4
    2cac:	31c00015 	stw	r7,0(r6)
    2cb0:	003ff906 	br	2c98 <_gp+0xffff7b78>
    2cb4:	01000034 	movhi	r4,0
    2cb8:	01400034 	movhi	r5,0
    2cbc:	210c1204 	addi	r4,r4,12360
    2cc0:	294c1204 	addi	r5,r5,12360

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2cc4:	2140101e 	bne	r4,r5,2d08 <alt_load+0xb4>
    2cc8:	00000b06 	br	2cf8 <alt_load+0xa4>
    2ccc:	00c00034 	movhi	r3,0
    2cd0:	18c86004 	addi	r3,r3,8576
    2cd4:	1907c83a 	sub	r3,r3,r4
    2cd8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2cdc:	10fff526 	beq	r2,r3,2cb4 <_gp+0xffff7b94>
    {
      *to++ = *from++;
    2ce0:	114f883a 	add	r7,r2,r5
    2ce4:	39c00017 	ldw	r7,0(r7)
    2ce8:	110d883a 	add	r6,r2,r4
    2cec:	10800104 	addi	r2,r2,4
    2cf0:	31c00015 	stw	r7,0(r6)
    2cf4:	003ff906 	br	2cdc <_gp+0xffff7bbc>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2cf8:	0002fa80 	call	2fa8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    2cfc:	dfc00017 	ldw	ra,0(sp)
    2d00:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    2d04:	0002fac1 	jmpi	2fac <alt_icache_flush_all>
    2d08:	00c00034 	movhi	r3,0
    2d0c:	18cc4804 	addi	r3,r3,12576
    2d10:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2d14:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2d18:	18bff726 	beq	r3,r2,2cf8 <_gp+0xffff7bd8>
    {
      *to++ = *from++;
    2d1c:	114f883a 	add	r7,r2,r5
    2d20:	39c00017 	ldw	r7,0(r7)
    2d24:	110d883a 	add	r6,r2,r4
    2d28:	10800104 	addi	r2,r2,4
    2d2c:	31c00015 	stw	r7,0(r6)
    2d30:	003ff906 	br	2d18 <_gp+0xffff7bf8>

00002d34 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2d34:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2d38:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2d3c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2d40:	0002f500 	call	2f50 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2d44:	0002f700 	call	2f70 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2d48:	d1a02717 	ldw	r6,-32612(gp)
    2d4c:	d1602817 	ldw	r5,-32608(gp)
    2d50:	d1202917 	ldw	r4,-32604(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2d54:	dfc00017 	ldw	ra,0(sp)
    2d58:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2d5c:	000260c1 	jmpi	260c <main>

00002d60 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    2d60:	defff204 	addi	sp,sp,-56
    2d64:	2005883a 	mov	r2,r4
    2d68:	dfc00a15 	stw	ra,40(sp)
    2d6c:	df000915 	stw	fp,36(sp)
    2d70:	ddc00815 	stw	r23,32(sp)
    2d74:	dd800715 	stw	r22,28(sp)
    2d78:	dd400615 	stw	r21,24(sp)
    2d7c:	dd000515 	stw	r20,20(sp)
    2d80:	dcc00415 	stw	r19,16(sp)
    2d84:	dc800315 	stw	r18,12(sp)
    2d88:	dc400215 	stw	r17,8(sp)
    2d8c:	dc000115 	stw	r16,4(sp)
    2d90:	d9400b15 	stw	r5,44(sp)
    2d94:	d9800c15 	stw	r6,48(sp)
    2d98:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2d9c:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
    2da0:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    2da4:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    2da8:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    2dac:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2db0:	11000007 	ldb	r4,0(r2)
    2db4:	20003a26 	beq	r4,zero,2ea0 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2db8:	24000226 	beq	r4,r16,2dc4 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2dbc:	14400044 	addi	r17,r2,1
    2dc0:	00001406 	br	2e14 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    2dc4:	14400084 	addi	r17,r2,2
    2dc8:	10800047 	ldb	r2,1(r2)
    2dcc:	10003426 	beq	r2,zero,2ea0 <alt_printf+0x140>
            {
                if (c == '%')
    2dd0:	1400021e 	bne	r2,r16,2ddc <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    2dd4:	8009883a 	mov	r4,r16
    2dd8:	00000e06 	br	2e14 <alt_printf+0xb4>
                } 
                else if (c == 'c')
    2ddc:	1480051e 	bne	r2,r18,2df4 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    2de0:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    2de4:	ad800104 	addi	r22,r21,4
    2de8:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
    2dec:	0002ed00 	call	2ed0 <alt_putchar>
    2df0:	00002906 	br	2e98 <alt_printf+0x138>
                }
                else if (c == 'x')
    2df4:	14c0201e 	bne	r2,r19,2e78 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    2df8:	adc00017 	ldw	r23,0(r21)
    2dfc:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    2e00:	b8000326 	beq	r23,zero,2e10 <alt_printf+0xb0>
    2e04:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    2e08:	00c003c4 	movi	r3,15
    2e0c:	00000306 	br	2e1c <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    2e10:	01000c04 	movi	r4,48
    2e14:	0002ed00 	call	2ed0 <alt_putchar>
                        continue;
    2e18:	00001f06 	br	2e98 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    2e1c:	1d84983a 	sll	r2,r3,r22
    2e20:	15c4703a 	and	r2,r2,r23
    2e24:	1000021e 	bne	r2,zero,2e30 <alt_printf+0xd0>
                        digit_shift -= 4;
    2e28:	b5bfff04 	addi	r22,r22,-4
    2e2c:	003ffb06 	br	2e1c <_gp+0xffff7cfc>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2e30:	070003c4 	movi	fp,15
                        if (digit <= 9)
    2e34:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    2e38:	b0001716 	blt	r22,zero,2e98 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2e3c:	e588983a 	sll	r4,fp,r22
    2e40:	25c8703a 	and	r4,r4,r23
    2e44:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
    2e48:	19000236 	bltu	r3,r4,2e54 <alt_printf+0xf4>
                            c = '0' + digit;
    2e4c:	21000c04 	addi	r4,r4,48
    2e50:	00000106 	br	2e58 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
    2e54:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
    2e58:	21003fcc 	andi	r4,r4,255
    2e5c:	2100201c 	xori	r4,r4,128
    2e60:	213fe004 	addi	r4,r4,-128
    2e64:	d8c00015 	stw	r3,0(sp)
    2e68:	0002ed00 	call	2ed0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    2e6c:	b5bfff04 	addi	r22,r22,-4
    2e70:	d8c00017 	ldw	r3,0(sp)
    2e74:	003ff006 	br	2e38 <_gp+0xffff7d18>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    2e78:	1500071e 	bne	r2,r20,2e98 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    2e7c:	ad800017 	ldw	r22,0(r21)
    2e80:	ad400104 	addi	r21,r21,4

                    while(*s)
    2e84:	b1000007 	ldb	r4,0(r22)
    2e88:	20000326 	beq	r4,zero,2e98 <alt_printf+0x138>
                      alt_putchar(*s++);
    2e8c:	b5800044 	addi	r22,r22,1
    2e90:	0002ed00 	call	2ed0 <alt_putchar>
    2e94:	003ffb06 	br	2e84 <_gp+0xffff7d64>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    2e98:	8805883a 	mov	r2,r17
    2e9c:	003fc406 	br	2db0 <_gp+0xffff7c90>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    2ea0:	dfc00a17 	ldw	ra,40(sp)
    2ea4:	df000917 	ldw	fp,36(sp)
    2ea8:	ddc00817 	ldw	r23,32(sp)
    2eac:	dd800717 	ldw	r22,28(sp)
    2eb0:	dd400617 	ldw	r21,24(sp)
    2eb4:	dd000517 	ldw	r20,20(sp)
    2eb8:	dcc00417 	ldw	r19,16(sp)
    2ebc:	dc800317 	ldw	r18,12(sp)
    2ec0:	dc400217 	ldw	r17,8(sp)
    2ec4:	dc000117 	ldw	r16,4(sp)
    2ec8:	dec00e04 	addi	sp,sp,56
    2ecc:	f800283a 	ret

00002ed0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2ed0:	defffd04 	addi	sp,sp,-12
    2ed4:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    2ed8:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2edc:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2ee0:	01000034 	movhi	r4,0
    2ee4:	000f883a 	mov	r7,zero
    2ee8:	01800044 	movi	r6,1
    2eec:	d80b883a 	mov	r5,sp
    2ef0:	210c5704 	addi	r4,r4,12636
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2ef4:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2ef8:	0002f740 	call	2f74 <altera_avalon_jtag_uart_write>
    2efc:	00ffffc4 	movi	r3,-1
    2f00:	10c00126 	beq	r2,r3,2f08 <alt_putchar+0x38>
        return -1;
    }
    return c;
    2f04:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    2f08:	dfc00217 	ldw	ra,8(sp)
    2f0c:	dc000117 	ldw	r16,4(sp)
    2f10:	dec00304 	addi	sp,sp,12
    2f14:	f800283a 	ret

00002f18 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    2f18:	defffe04 	addi	sp,sp,-8
    2f1c:	dc000015 	stw	r16,0(sp)
    2f20:	dfc00115 	stw	ra,4(sp)
    2f24:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2f28:	000302c0 	call	302c <strlen>
    2f2c:	01000034 	movhi	r4,0
    2f30:	000f883a 	mov	r7,zero
    2f34:	100d883a 	mov	r6,r2
    2f38:	800b883a 	mov	r5,r16
    2f3c:	210c5704 	addi	r4,r4,12636
#else
    return fputs(str, stdout);
#endif
#endif
}
    2f40:	dfc00117 	ldw	ra,4(sp)
    2f44:	dc000017 	ldw	r16,0(sp)
    2f48:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2f4c:	0002f741 	jmpi	2f74 <altera_avalon_jtag_uart_write>

00002f50 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2f50:	deffff04 	addi	sp,sp,-4
    2f54:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
    2f58:	0002fb00 	call	2fb0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2f5c:	00800044 	movi	r2,1
    2f60:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2f64:	dfc00017 	ldw	ra,0(sp)
    2f68:	dec00104 	addi	sp,sp,4
    2f6c:	f800283a 	ret

00002f70 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    2f70:	f800283a 	ret

00002f74 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    2f74:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    2f78:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    2f7c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2f80:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    2f84:	2980072e 	bgeu	r5,r6,2fa4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2f88:	38c00037 	ldwio	r3,0(r7)
    2f8c:	18ffffec 	andhi	r3,r3,65535
    2f90:	183ffc26 	beq	r3,zero,2f84 <_gp+0xffff7e64>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    2f94:	28c00007 	ldb	r3,0(r5)
    2f98:	20c00035 	stwio	r3,0(r4)
    2f9c:	29400044 	addi	r5,r5,1
    2fa0:	003ff806 	br	2f84 <_gp+0xffff7e64>

  return count;
}
    2fa4:	f800283a 	ret

00002fa8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2fa8:	f800283a 	ret

00002fac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2fac:	f800283a 	ret

00002fb0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2fb0:	000170fa 	wrctl	ienable,zero
    2fb4:	f800283a 	ret

00002fb8 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    2fb8:	213ffe84 	addi	r4,r4,-6
    2fbc:	008003c4 	movi	r2,15
    2fc0:	11001636 	bltu	r2,r4,301c <alt_exception_cause_generated_bad_addr+0x64>
    2fc4:	200890ba 	slli	r4,r4,2
    2fc8:	00800034 	movhi	r2,0
    2fcc:	108bf704 	addi	r2,r2,12252
    2fd0:	2089883a 	add	r4,r4,r2
    2fd4:	20800017 	ldw	r2,0(r4)
    2fd8:	1000683a 	jmp	r2
    2fdc:	00003024 	muli	zero,zero,192
    2fe0:	00003024 	muli	zero,zero,192
    2fe4:	0000301c 	xori	zero,zero,192
    2fe8:	0000301c 	xori	zero,zero,192
    2fec:	0000301c 	xori	zero,zero,192
    2ff0:	00003024 	muli	zero,zero,192
    2ff4:	0000301c 	xori	zero,zero,192
    2ff8:	0000301c 	xori	zero,zero,192
    2ffc:	00003024 	muli	zero,zero,192
    3000:	00003024 	muli	zero,zero,192
    3004:	0000301c 	xori	zero,zero,192
    3008:	00003024 	muli	zero,zero,192
    300c:	0000301c 	xori	zero,zero,192
    3010:	0000301c 	xori	zero,zero,192
    3014:	0000301c 	xori	zero,zero,192
    3018:	00003024 	muli	zero,zero,192
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    301c:	0005883a 	mov	r2,zero
    3020:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    3024:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    3028:	f800283a 	ret

0000302c <strlen>:
    302c:	2005883a 	mov	r2,r4
    3030:	10c00007 	ldb	r3,0(r2)
    3034:	18000226 	beq	r3,zero,3040 <strlen+0x14>
    3038:	10800044 	addi	r2,r2,1
    303c:	003ffc06 	br	3030 <_gp+0xffff7f10>
    3040:	1105c83a 	sub	r2,r2,r4
    3044:	f800283a 	ret
