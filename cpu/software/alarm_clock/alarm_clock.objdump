
alarm_clock.elf:     file format elf32-littlenios2
alarm_clock.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001180

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000d90 memsz 0x00000d90 flags r-x
    LOAD off    0x00001db0 vaddr 0x00001db0 paddr 0x00001df4 align 2**12
         filesz 0x00000044 memsz 0x00000044 flags rw-
    LOAD off    0x00001e38 vaddr 0x00001e38 paddr 0x00001e38 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000bb8  00001180  00001180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000078  00001d38  00001d38  00001d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000044  00001db0  00001df4  00001db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00001e38  00001e38  00001e38  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00001f5c  00001f5c  00001df4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b8  00000000  00000000  00001e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000022b3  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f56  00000000  00000000  00004383  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000f49  00000000  00000000  000052d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003b8  00000000  00000000  00006224  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000efe  00000000  00000000  000065dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000dfd  00000000  00000000  000074da  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000082d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000208  00000000  00000000  000082e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00009825  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00009828  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000982b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000982c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000982d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00009831  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00009835  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00009839  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000049  00000000  00000000  0000983f  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0007c2d1  00000000  00000000  00009888  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001180 l    d  .text	00000000 .text
00001d38 l    d  .rodata	00000000 .rodata
00001db0 l    d  .rwdata	00000000 .rwdata
00001e38 l    d  .bss	00000000 .bss
00001f5c l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_clock_bsp//obj/HAL/src/crt0.o
000011b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000011bc l     F .text	0000004c btn_up_respond
00001208 l     F .text	000000a4 btn_set_respond
000013dc l     F .text	00000124 timer_respond
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00001e58 g     O .bss	00000004 alt_instruction_exception_handler
00001a24 g     F .text	0000002c alt_main
00001e5c g     O .bss	00000100 alt_irq
00001df4 g       *ABS*	00000000 __flash_rwdata_start
00001df0 g     O .rwdata	00000004 UART
00001500 g     F .text	0000003c init_values
00001c08 g     F .text	00000038 alt_putstr
00001ca0 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001de4 g     O .rwdata	00000004 h0_ptr
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001de0 g     O .rwdata	00000004 m1_ptr
00001e50 g     O .bss	00000004 alt_argv
00009db0 g       *ABS*	00000000 _gp
00001ca8 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00001dd4 g     O .rwdata	00000004 s0_ptr
00001dc8 g     O .rwdata	00000004 down_ptr
000017f4 g     F .text	00000064 .hidden __udivsi3
00001ddc g     O .rwdata	00000004 m0_ptr
000018b0 g     F .text	00000094 alt_irq_register
00001f5c g       *ABS*	00000000 __bss_end
00001db2 g     O .rwdata	00000006 alarm
00001e48 g     O .bss	00000004 alt_irq_active
000010fc g     F .exceptions	00000060 alt_irq_handler
00001dc0 g     O .rwdata	00000004 swc_alarm
00001e3b g     O .bss	00000001 up_pressed
00001dc4 g     O .rwdata	00000004 swc_sel
00001c98 g     F .text	00000004 alt_dcache_flush_all
00001dd8 g     O .rwdata	00000004 s1_ptr
00001df4 g       *ABS*	00000000 __ram_rwdata_end
00001db0 g       *ABS*	00000000 __ram_rodata_end
00001858 g     F .text	00000058 .hidden __umodsi3
00001f5c g       *ABS*	00000000 end
0000115c g     F .exceptions	00000024 alt_instruction_exception_entry
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001c64 g     F .text	00000034 altera_avalon_jtag_uart_write
00001a50 g     F .text	00000170 alt_printf
00001dcc g     O .rwdata	00000004 up_ptr
00001180 g     F .text	0000003c _start
00001c60 g     F .text	00000004 alt_sys_init
00001de8 g     O .rwdata	00000004 h1_ptr
00001db0 g       *ABS*	00000000 __ram_rwdata_start
00001d38 g       *ABS*	00000000 __ram_rodata_start
00001e40 g     O .bss	00000006 hour
00001f5c g       *ABS*	00000000 __alt_stack_base
00001308 g     F .text	00000060 add_second
00001e3a g     O .bss	00000001 down_pressed
00001e3d g     O .bss	00000001 irqtimer_stall
00001e38 g       *ABS*	00000000 __bss_start
0000153c g     F .text	000001c0 main
00001000 g       *ABS*	00000000 __alt_mem_RAM
00001e4c g     O .bss	00000004 alt_envp
00001e38 g     O .bss	00000001 button_pressed
000016fc g     F .text	00000084 .hidden __divsi3
000012ac g     F .text	0000005c set_value
00001d38 g       *ABS*	00000000 __flash_rodata_start
00001db8 g     O .rwdata	00000004 timer_base_ptr
00001dd0 g     O .rwdata	00000004 set_clock
00001c40 g     F .text	00000020 alt_irq_init
00001dbc g     O .rwdata	00000004 alarm_ptr
00001e54 g     O .bss	00000004 alt_argc
00001020 g       .exceptions	00000000 alt_irq_entry
00001368 g     F .text	00000074 display_hour
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001db0 g     O .rwdata	00000001 first
00001df4 g       *ABS*	00000000 _edata
00001f5c g       *ABS*	00000000 _end
00001180 g       *ABS*	00000000 __ram_exceptions_end
00001780 g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
00001020 g     F .exceptions	00000000 alt_exception
00001e3e g     O .bss	00000002 is_activated
0000100c g       .entry	00000000 _exit
00001e39 g     O .bss	00000001 set_pressed
00001d1c g     F .text	0000001c strlen
00001bc0 g     F .text	00000048 alt_putchar
00001c9c g     F .text	00000004 alt_icache_flush_all
00001dec g     O .rwdata	00000004 alt_priority_mask
00001e3c g     O .bss	00000001 ud_buttons_en
00001944 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08446014 	ori	at,at,4480
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .exceptions:

00001020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    1020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    1024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    1028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    102c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    1030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    1034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    1038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    103c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    1040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    1044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    1048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    104c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    1050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    1054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    1058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    105c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    1060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    1064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    1068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    106c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    1070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    1074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    1078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    107c:	10000326 	beq	r2,zero,108c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    1080:	20000226 	beq	r4,zero,108c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    1084:	00010fc0 	call	10fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    1088:	00000706 	br	10a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    108c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    1090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    1094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    1098:	000115c0 	call	115c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    109c:	1000021e 	bne	r2,zero,10a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    10a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    10a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    10a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    10ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    10b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    10b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    10b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    10bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    10c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    10c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    10c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    10cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    10d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    10d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    10d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    10dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    10e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    10e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    10e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    10ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    10f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    10f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    10f8:	ef80083a 	eret

000010fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    10fc:	defffe04 	addi	sp,sp,-8
    1100:	dfc00115 	stw	ra,4(sp)
    1104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    1108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    110c:	04000034 	movhi	r16,0
    1110:	84079704 	addi	r16,r16,7772

  active = alt_irq_pending ();

  do
  {
    i = 0;
    1114:	0005883a 	mov	r2,zero
    mask = 1;
    1118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    111c:	20ca703a 	and	r5,r4,r3
    1120:	28000b26 	beq	r5,zero,1150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    1124:	100490fa 	slli	r2,r2,3
    1128:	8085883a 	add	r2,r16,r2
    112c:	10c00017 	ldw	r3,0(r2)
    1130:	11000117 	ldw	r4,4(r2)
    1134:	183ee83a 	callr	r3
    1138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    113c:	203ff51e 	bne	r4,zero,1114 <_gp+0xffff7364>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	dc000017 	ldw	r16,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    1150:	18c7883a 	add	r3,r3,r3
      i++;
    1154:	10800044 	addi	r2,r2,1

    } while (1);
    1158:	003ff006 	br	111c <_gp+0xffff736c>

0000115c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    115c:	d0a02a17 	ldw	r2,-32600(gp)
    1160:	10000426 	beq	r2,zero,1174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    1164:	200b883a 	mov	r5,r4
    1168:	000d883a 	mov	r6,zero
    116c:	013fffc4 	movi	r4,-1
    1170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    1174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    1178:	0005883a 	mov	r2,zero
    117c:	f800283a 	ret

Disassembly of section .text:

00001180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1184:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    118c:	d6a76c14 	ori	gp,gp,40368
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1194:	10878e14 	ori	r2,r2,7736

    movhi r3, %hi(__bss_end)
    1198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    119c:	18c7d714 	ori	r3,r3,8028

    beq r2, r3, 1f
    11a0:	10c00326 	beq	r2,r3,11b0 <_start+0x30>

0:
    stw zero, (r2)
    11a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    11a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    11ac:	10fffd36 	bltu	r2,r3,11a4 <_gp+0xffff73f4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    11b0:	00019440 	call	1944 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    11b4:	0001a240 	call	1a24 <alt_main>

000011b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    11b8:	003fff06 	br	11b8 <_gp+0xffff7408>

000011bc <btn_up_respond>:
 */
static void btn_up_respond(void* context, alt_u32 id){
	//logica del boton up.

	unsigned int *button_action = (unsigned int*) context;
	*button_action =  IORD_ALTERA_AVALON_PIO_EDGE_CAP(BTN_UP_BASE);
    11bc:	00902304 	movi	r2,16524
    11c0:	10c00037 	ldwio	r3,0(r2)
    11c4:	20c00015 	stw	r3,0(r4)

	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_UP_BASE, *button_action);
    11c8:	10c00035 	stwio	r3,0(r2)

	if (!up_pressed) {
    11cc:	d0a022c3 	ldbu	r2,-32629(gp)
    11d0:	10000a1e 	bne	r2,zero,11fc <btn_up_respond+0x40>
		alt_putstr("Button up\n");
    11d4:	01000034 	movhi	r4,0
}

/**
 * Handler for button up interrupt.
 */
static void btn_up_respond(void* context, alt_u32 id){
    11d8:	deffff04 	addi	sp,sp,-4

	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_UP_BASE, *button_action);

	if (!up_pressed) {
		alt_putstr("Button up\n");
    11dc:	21074e04 	addi	r4,r4,7480
}

/**
 * Handler for button up interrupt.
 */
static void btn_up_respond(void* context, alt_u32 id){
    11e0:	dfc00015 	stw	ra,0(sp)

	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_UP_BASE, *button_action);

	if (!up_pressed) {
		alt_putstr("Button up\n");
    11e4:	0001c080 	call	1c08 <alt_putstr>
		up_pressed = TRUE;
    11e8:	00800044 	movi	r2,1
    11ec:	d0a022c5 	stb	r2,-32629(gp)
	} else {
		alt_putstr("Button already set up\n");
	}
}
    11f0:	dfc00017 	ldw	ra,0(sp)
    11f4:	dec00104 	addi	sp,sp,4
    11f8:	f800283a 	ret

	if (!up_pressed) {
		alt_putstr("Button up\n");
		up_pressed = TRUE;
	} else {
		alt_putstr("Button already set up\n");
    11fc:	01000034 	movhi	r4,0
    1200:	21075104 	addi	r4,r4,7492
    1204:	0001c081 	jmpi	1c08 <alt_putstr>

00001208 <btn_set_respond>:

	up_pressed = FALSE;
//	down_pressed = FALSE;
	//logica del boton set_alarm.
	unsigned int *button_action = (unsigned int*) context;
	*button_action =  IORD_ALTERA_AVALON_PIO_EDGE_CAP(BTN_SET_BASE);
    1208:	00901f04 	movi	r2,16508
/**
 * Handler for alarm set button interrupt.
 */
static void btn_set_respond(void* context, alt_u32 id) {

	up_pressed = FALSE;
    120c:	d02022c5 	stb	zero,-32629(gp)
//	down_pressed = FALSE;
	//logica del boton set_alarm.
	unsigned int *button_action = (unsigned int*) context;
	*button_action =  IORD_ALTERA_AVALON_PIO_EDGE_CAP(BTN_SET_BASE);
    1210:	10c00037 	ldwio	r3,0(r2)
    1214:	20c00015 	stw	r3,0(r4)

	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_SET_BASE, *button_action);
    1218:	10c00035 	stwio	r3,0(r2)

	if (!set_pressed) {
    121c:	d0a02243 	ldbu	r2,-32631(gp)
    1220:	10001f1e 	bne	r2,zero,12a0 <btn_set_respond+0x98>
		alt_putstr("Button set\n");
    1224:	01000034 	movhi	r4,0


/**
 * Handler for alarm set button interrupt.
 */
static void btn_set_respond(void* context, alt_u32 id) {
    1228:	deffff04 	addi	sp,sp,-4

	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_SET_BASE, *button_action);

	if (!set_pressed) {
		alt_putstr("Button set\n");
    122c:	21075704 	addi	r4,r4,7516


/**
 * Handler for alarm set button interrupt.
 */
static void btn_set_respond(void* context, alt_u32 id) {
    1230:	dfc00015 	stw	ra,0(sp)

	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_SET_BASE, *button_action);

	if (!set_pressed) {
		alt_putstr("Button set\n");
    1234:	0001c080 	call	1c08 <alt_putstr>
		set_pressed = TRUE;
		if (irqtimer_stall) {
    1238:	d1202343 	ldbu	r4,-32627(gp)
	/* Acknowledge interrupt by clearing edge capture register */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_SET_BASE, *button_action);

	if (!set_pressed) {
		alt_putstr("Button set\n");
		set_pressed = TRUE;
    123c:	00c00044 	movi	r3,1
    1240:	d0e02245 	stb	r3,-32631(gp)
    1244:	00bfff84 	movi	r2,-2
		if (irqtimer_stall) {
    1248:	20000726 	beq	r4,zero,1268 <btn_set_respond+0x60>
			irqtimer_stall = FALSE;
    124c:	d0202345 	stb	zero,-32627(gp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1250:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1254:	1884703a 	and	r2,r3,r2
    1258:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    125c:	d0a02617 	ldw	r2,-32616(gp)
    1260:	10800414 	ori	r2,r2,16
    1264:	00000706 	br	1284 <btn_set_respond+0x7c>

			alt_irq_enable(TIMER_IRQ);
		} else {
			irqtimer_stall = TRUE;
    1268:	d0e02345 	stb	r3,-32627(gp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    126c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1270:	1884703a 	and	r2,r3,r2
    1274:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    1278:	d1202617 	ldw	r4,-32616(gp)
    127c:	00bffbc4 	movi	r2,-17
    1280:	2084703a 	and	r2,r4,r2
    1284:	d0a02615 	stw	r2,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1288:	d0a02617 	ldw	r2,-32616(gp)
    128c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1290:	1801703a 	wrctl	status,r3
			alt_irq_disable(TIMER_IRQ);
		}
	} else {
		alt_putstr("Button already set\n");
	}
}
    1294:	dfc00017 	ldw	ra,0(sp)
    1298:	dec00104 	addi	sp,sp,4
    129c:	f800283a 	ret
			irqtimer_stall = TRUE;

			alt_irq_disable(TIMER_IRQ);
		}
	} else {
		alt_putstr("Button already set\n");
    12a0:	01000034 	movhi	r4,0
    12a4:	21075a04 	addi	r4,r4,7528
    12a8:	0001c081 	jmpi	1c08 <alt_putstr>

000012ac <set_value>:

/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
    12ac:	defffc04 	addi	sp,sp,-16
    12b0:	dc000015 	stw	r16,0(sp)
	*seg1 = (unsigned char) value / 10;
    12b4:	24003fcc 	andi	r16,r4,255

/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
    12b8:	dc800215 	stw	r18,8(sp)
	*seg1 = (unsigned char) value / 10;
    12bc:	8009883a 	mov	r4,r16

/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
    12c0:	2825883a 	mov	r18,r5
	*seg1 = (unsigned char) value / 10;
    12c4:	01400284 	movi	r5,10

/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
    12c8:	dfc00315 	stw	ra,12(sp)
    12cc:	dc400115 	stw	r17,4(sp)
    12d0:	3023883a 	mov	r17,r6
	*seg1 = (unsigned char) value / 10;
    12d4:	00017f40 	call	17f4 <__udivsi3>
    12d8:	90800005 	stb	r2,0(r18)
	*seg0 = (unsigned char) value % 10;
    12dc:	01400284 	movi	r5,10
    12e0:	8009883a 	mov	r4,r16
    12e4:	00018580 	call	1858 <__umodsi3>
    12e8:	88800005 	stb	r2,0(r17)

	return 0;
}
    12ec:	0005883a 	mov	r2,zero
    12f0:	dfc00317 	ldw	ra,12(sp)
    12f4:	dc800217 	ldw	r18,8(sp)
    12f8:	dc400117 	ldw	r17,4(sp)
    12fc:	dc000017 	ldw	r16,0(sp)
    1300:	dec00404 	addi	sp,sp,16
    1304:	f800283a 	ret

00001308 <add_second>:
 */
void add_second()
{
//	if (sel == 0) {
	// Add a second
	hour[0]++;
    1308:	d0a0240b 	ldhu	r2,-32624(gp)

	if (hour[0] == 60)
    130c:	01000f04 	movi	r4,60
 */
void add_second()
{
//	if (sel == 0) {
	// Add a second
	hour[0]++;
    1310:	10800044 	addi	r2,r2,1

	if (hour[0] == 60)
    1314:	10ffffcc 	andi	r3,r2,65535
    1318:	19000226 	beq	r3,r4,1324 <add_second+0x1c>
 */
void add_second()
{
//	if (sel == 0) {
	// Add a second
	hour[0]++;
    131c:	d0a0240d 	sth	r2,-32624(gp)
    1320:	f800283a 	ret

	if (hour[0] == 60)
	{
		hour[0] = 0;
		hour[1]++;
    1324:	d0a0248b 	ldhu	r2,-32622(gp)
	// Add a second
	hour[0]++;

	if (hour[0] == 60)
	{
		hour[0] = 0;
    1328:	d020240d 	sth	zero,-32624(gp)
		hour[1]++;
    132c:	10800044 	addi	r2,r2,1

		if (hour[1] == 60)
    1330:	113fffcc 	andi	r4,r2,65535
    1334:	20c00226 	beq	r4,r3,1340 <add_second+0x38>
	hour[0]++;

	if (hour[0] == 60)
	{
		hour[0] = 0;
		hour[1]++;
    1338:	d0a0248d 	sth	r2,-32622(gp)
    133c:	f800283a 	ret

		if (hour[1] == 60)
		{
			hour[1] = 0;
			hour[2]++;
    1340:	d0a0250b 	ldhu	r2,-32620(gp)
		hour[0] = 0;
		hour[1]++;

		if (hour[1] == 60)
		{
			hour[1] = 0;
    1344:	d020248d 	sth	zero,-32622(gp)
			hour[2]++;

			if (hour[2] == 24)
    1348:	00c00604 	movi	r3,24
		hour[1]++;

		if (hour[1] == 60)
		{
			hour[1] = 0;
			hour[2]++;
    134c:	10800044 	addi	r2,r2,1

			if (hour[2] == 24)
    1350:	113fffcc 	andi	r4,r2,65535
    1354:	20c00226 	beq	r4,r3,1360 <add_second+0x58>
		hour[1]++;

		if (hour[1] == 60)
		{
			hour[1] = 0;
			hour[2]++;
    1358:	d0a0250d 	sth	r2,-32620(gp)
    135c:	f800283a 	ret

			if (hour[2] == 24)
			{
				hour[2] = 0;
    1360:	d020250d 	sth	zero,-32620(gp)
    1364:	f800283a 	ret

00001368 <display_hour>:
	}
}

void display_hour()
{
	alt_printf("%x %x : %x %x : %x %x\n", *h1_ptr, *h0_ptr, *m1_ptr, *m0_ptr,
    1368:	d0a00e17 	ldw	r2,-32712(gp)
		}
	}
}

void display_hour()
{
    136c:	defffc04 	addi	sp,sp,-16
    1370:	dfc00315 	stw	ra,12(sp)
	alt_printf("%x %x : %x %x : %x %x\n", *h1_ptr, *h0_ptr, *m1_ptr, *m0_ptr,
    1374:	11400003 	ldbu	r5,0(r2)
    1378:	d0a00d17 	ldw	r2,-32716(gp)
									   *s1_ptr, *s0_ptr);
    137c:	d0e00a17 	ldw	r3,-32728(gp)
    1380:	d1200917 	ldw	r4,-32732(gp)
	}
}

void display_hour()
{
	alt_printf("%x %x : %x %x : %x %x\n", *h1_ptr, *h0_ptr, *m1_ptr, *m0_ptr,
    1384:	11800003 	ldbu	r6,0(r2)
    1388:	d0a00c17 	ldw	r2,-32720(gp)
    138c:	29403fcc 	andi	r5,r5,255
    1390:	31803fcc 	andi	r6,r6,255
    1394:	11c00003 	ldbu	r7,0(r2)
    1398:	d0a00b17 	ldw	r2,-32724(gp)
    139c:	39c03fcc 	andi	r7,r7,255
    13a0:	10800003 	ldbu	r2,0(r2)
									   *s1_ptr, *s0_ptr);
    13a4:	18c00003 	ldbu	r3,0(r3)
    13a8:	21000003 	ldbu	r4,0(r4)
	}
}

void display_hour()
{
	alt_printf("%x %x : %x %x : %x %x\n", *h1_ptr, *h0_ptr, *m1_ptr, *m0_ptr,
    13ac:	10803fcc 	andi	r2,r2,255
    13b0:	18c03fcc 	andi	r3,r3,255
    13b4:	21003fcc 	andi	r4,r4,255
    13b8:	d9000215 	stw	r4,8(sp)
    13bc:	01000034 	movhi	r4,0
    13c0:	d8c00115 	stw	r3,4(sp)
    13c4:	d8800015 	stw	r2,0(sp)
    13c8:	21075f04 	addi	r4,r4,7548
    13cc:	0001a500 	call	1a50 <alt_printf>
									   *s1_ptr, *s0_ptr);
}
    13d0:	dfc00317 	ldw	ra,12(sp)
    13d4:	dec00404 	addi	sp,sp,16
    13d8:	f800283a 	ret

000013dc <timer_respond>:

/**
 * Handler for timer interrupt.
 */
static void timer_respond(void* context){
    13dc:	defffb04 	addi	sp,sp,-20
    13e0:	dfc00415 	stw	ra,16(sp)
    13e4:	dcc00315 	stw	r19,12(sp)
    13e8:	dc800215 	stw	r18,8(sp)
    13ec:	dc400115 	stw	r17,4(sp)
    13f0:	dc000015 	stw	r16,0(sp)

	/* Acknowledge interrupt by clearing status register */
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0);
    13f4:	00903804 	movi	r2,16608
    13f8:	10000035 	stwio	zero,0(r2)

	//	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
//	clock_pressed = FALSE;
	set_pressed = FALSE;
    13fc:	d0202245 	stb	zero,-32631(gp)
	ud_buttons_en = FALSE;
    1400:	d0202305 	stb	zero,-32628(gp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1404:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1408:	00bfff84 	movi	r2,-2
    140c:	2086703a 	and	r3,r4,r2
    1410:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    1414:	d1602617 	ldw	r5,-32616(gp)
    1418:	00fffec4 	movi	r3,-5
    141c:	28c6703a 	and	r3,r5,r3
    1420:	d0e02615 	stw	r3,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1424:	d0e02617 	ldw	r3,-32616(gp)
    1428:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    142c:	2001703a 	wrctl	status,r4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1430:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1434:	1884703a 	and	r2,r3,r2
    1438:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    143c:	d1202617 	ldw	r4,-32616(gp)
    1440:	00bffdc4 	movi	r2,-9
    1444:	2084703a 	and	r2,r4,r2
    1448:	d0a02615 	stw	r2,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    144c:	d0a02617 	ldw	r2,-32616(gp)
    1450:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1454:	1801703a 	wrctl	status,r3
	alt_irq_disable(BTN_UP_IRQ);
	alt_irq_disable(BTN_DOWN_IRQ);

	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
    1458:	d4202404 	addi	r16,gp,-32624
	ud_buttons_en = FALSE;

	alt_irq_disable(BTN_UP_IRQ);
	alt_irq_disable(BTN_DOWN_IRQ);

	add_second();
    145c:	00013080 	call	1308 <add_second>
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    1460:	84400003 	ldbu	r17,0(r16)
	alt_irq_disable(BTN_UP_IRQ);
	alt_irq_disable(BTN_DOWN_IRQ);

	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
    1464:	d4e00a17 	ldw	r19,-32728(gp)
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    1468:	01400284 	movi	r5,10
    146c:	8809883a 	mov	r4,r17
    1470:	00017f40 	call	17f4 <__udivsi3>
	alt_irq_disable(BTN_UP_IRQ);
	alt_irq_disable(BTN_DOWN_IRQ);

	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
    1474:	d4a00917 	ldw	r18,-32732(gp)
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
    1478:	8809883a 	mov	r4,r17
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    147c:	98800005 	stb	r2,0(r19)
	*seg0 = (unsigned char) value % 10;
    1480:	01400284 	movi	r5,10
    1484:	00018580 	call	1858 <__umodsi3>
    1488:	90800005 	stb	r2,0(r18)
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    148c:	84400083 	ldbu	r17,2(r16)
	alt_irq_disable(BTN_DOWN_IRQ);

	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
    1490:	d4e00c17 	ldw	r19,-32720(gp)
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    1494:	01400284 	movi	r5,10
    1498:	8809883a 	mov	r4,r17
    149c:	00017f40 	call	17f4 <__udivsi3>
	alt_irq_disable(BTN_DOWN_IRQ);

	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
    14a0:	d4a00b17 	ldw	r18,-32724(gp)
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
    14a4:	8809883a 	mov	r4,r17
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    14a8:	98800005 	stb	r2,0(r19)
	*seg0 = (unsigned char) value % 10;
    14ac:	01400284 	movi	r5,10
    14b0:	00018580 	call	1858 <__umodsi3>
    14b4:	90800005 	stb	r2,0(r18)
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    14b8:	84000103 	ldbu	r16,4(r16)

	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
	set_value(hour[2], h1_ptr, h0_ptr);
    14bc:	d4a00e17 	ldw	r18,-32712(gp)
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    14c0:	01400284 	movi	r5,10
    14c4:	8009883a 	mov	r4,r16
    14c8:	00017f40 	call	17f4 <__udivsi3>

	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
	set_value(hour[2], h1_ptr, h0_ptr);
    14cc:	d4600d17 	ldw	r17,-32716(gp)
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
    14d0:	01400284 	movi	r5,10
/**
 * Set values to the correct output.
 */
int set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    14d4:	90800005 	stb	r2,0(r18)
	*seg0 = (unsigned char) value % 10;
    14d8:	8009883a 	mov	r4,r16
    14dc:	00018580 	call	1858 <__umodsi3>
    14e0:	88800005 	stb	r2,0(r17)

//	alt_irq_disable(BTN_UP_IRQ);
//	alt_irq_disable(BTN_DOWN_IRQ);

	display_hour();
}
    14e4:	dfc00417 	ldw	ra,16(sp)
    14e8:	dcc00317 	ldw	r19,12(sp)
    14ec:	dc800217 	ldw	r18,8(sp)
    14f0:	dc400117 	ldw	r17,4(sp)
    14f4:	dc000017 	ldw	r16,0(sp)
    14f8:	dec00504 	addi	sp,sp,20
	set_value(hour[2], h1_ptr, h0_ptr);

//	alt_irq_disable(BTN_UP_IRQ);
//	alt_irq_disable(BTN_DOWN_IRQ);

	display_hour();
    14fc:	00013681 	jmpi	1368 <display_hour>

00001500 <init_values>:
}

void init_values()
{
	// Init all pointer in zero
	*h1_ptr = 0;
    1500:	d0a00e17 	ldw	r2,-32712(gp)
    1504:	10000005 	stb	zero,0(r2)
	*h0_ptr = 0;
    1508:	d0a00d17 	ldw	r2,-32716(gp)
    150c:	10000005 	stb	zero,0(r2)
	*m1_ptr = 0;
    1510:	d0a00c17 	ldw	r2,-32720(gp)
    1514:	10000005 	stb	zero,0(r2)
	*m0_ptr = 0;
    1518:	d0a00b17 	ldw	r2,-32724(gp)
    151c:	10000005 	stb	zero,0(r2)
	*s1_ptr = 0;
    1520:	d0a00a17 	ldw	r2,-32728(gp)
    1524:	10000005 	stb	zero,0(r2)
	*s0_ptr = 0;
    1528:	d0a00917 	ldw	r2,-32732(gp)
    152c:	10000005 	stb	zero,0(r2)

	// Alarm doesn't sound
	*alarm_ptr = 0;
    1530:	d0a00317 	ldw	r2,-32756(gp)
    1534:	10000005 	stb	zero,0(r2)
    1538:	f800283a 	ret

0000153c <main>:
}

int main()
{ 
	alt_putstr("Welcome to the Alarm Clock\n");
    153c:	01000034 	movhi	r4,0
	// Alarm doesn't sound
	*alarm_ptr = 0;
}

int main()
{ 
    1540:	defffc04 	addi	sp,sp,-16
	alt_putstr("Welcome to the Alarm Clock\n");
    1544:	21076504 	addi	r4,r4,7572
	// Alarm doesn't sound
	*alarm_ptr = 0;
}

int main()
{ 
    1548:	dfc00315 	stw	ra,12(sp)
    154c:	dc800215 	stw	r18,8(sp)
    1550:	dc400115 	stw	r17,4(sp)
    1554:	dc000015 	stw	r16,0(sp)
	alt_putstr("Welcome to the Alarm Clock\n");
    1558:	0001c080 	call	1c08 <alt_putstr>

	if (first) {
    155c:	d0a00003 	ldbu	r2,-32768(gp)
    1560:	10000226 	beq	r2,zero,156c <main+0x30>
		init_values();
    1564:	00015000 	call	1500 <init_values>
		first = FALSE;
    1568:	d0200005 	stb	zero,-32768(gp)
 * Buttons init.
 */
static void buttons_init(void){

	//Set alarm button:
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTN_SET_BASE, 0xf);
    156c:	040003c4 	movi	r16,15
    1570:	00901e04 	movi	r2,16504
    1574:	14000035 	stwio	r16,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_SET_BASE, 0x0);
    1578:	00901f04 	movi	r2,16508
    157c:	10000035 	stwio	zero,0(r2)
	alt_irq_register(BTN_SET_IRQ, BTN_SET_BASE, btn_set_respond);
    1580:	01800034 	movhi	r6,0
    1584:	31848204 	addi	r6,r6,4616
    1588:	01501c04 	movi	r5,16496
    158c:	01000044 	movi	r4,1
    1590:	00018b00 	call	18b0 <alt_irq_register>

	//Up button:
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTN_UP_BASE, 0xf);
    1594:	00902204 	movi	r2,16520
    1598:	14000035 	stwio	r16,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_UP_BASE, 0x0);
    159c:	00902304 	movi	r2,16524
    15a0:	10000035 	stwio	zero,0(r2)
	alt_irq_register(BTN_UP_IRQ, BTN_UP_BASE, btn_up_respond);
    15a4:	01800034 	movhi	r6,0
    15a8:	31846f04 	addi	r6,r6,4540
    15ac:	01502004 	movi	r5,16512
    15b0:	01000084 	movi	r4,2
    15b4:	00018b00 	call	18b0 <alt_irq_register>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    15b8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    15bc:	043fff84 	movi	r16,-2
    15c0:	1c04703a 	and	r2,r3,r16
    15c4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    15c8:	d1202617 	ldw	r4,-32616(gp)
    15cc:	00bffec4 	movi	r2,-5
    15d0:	2084703a 	and	r2,r4,r2
    15d4:	d0a02615 	stw	r2,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    15d8:	d0a02617 	ldw	r2,-32616(gp)
    15dc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    15e0:	1801703a 	wrctl	status,r3
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    15e4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    15e8:	1c04703a 	and	r2,r3,r16
    15ec:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    15f0:	d1202617 	ldw	r4,-32616(gp)
    15f4:	00bffdc4 	movi	r2,-9
    15f8:	2084703a 	and	r2,r4,r2
    15fc:	d0a02615 	stw	r2,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1600:	d0a02617 	ldw	r2,-32616(gp)
    1604:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1608:	1801703a 	wrctl	status,r3
/**
 * Timer init
 */
static void timer_init(void){
	//Start the values for the timer interrupt.
	IOWR_ALTERA_AVALON_TIMER_CONTROL(timer_base_ptr, ALTERA_AVALON_TIMER_CONTROL_ITO_MSK
    160c:	d0a00217 	ldw	r2,-32760(gp)
    1610:	00c00144 	movi	r3,5
    1614:	10c00135 	stwio	r3,4(r2)
	        | ALTERA_AVALON_TIMER_CONTROL_START_MSK);
	//Init the handler for the timer interrupt.
	alt_irq_register(TIMER_IRQ, TIMER_BASE /*timer_base_ptr*/, timer_respond);
    1618:	01800034 	movhi	r6,0
    161c:	3184f704 	addi	r6,r6,5084
    1620:	01503804 	movi	r5,16608
    1624:	01000104 	movi	r4,4
    1628:	00018b00 	call	18b0 <alt_irq_register>
	{

		if (!ud_buttons_en && set_pressed) {
			alt_irq_enable(BTN_UP_IRQ);
			alt_irq_enable(BTN_DOWN_IRQ);
			ud_buttons_en = TRUE;
    162c:	04800044 	movi	r18,1
    1630:	04400ec4 	movi	r17,59
	timer_init();

	while (TRUE)
	{

		if (!ud_buttons_en && set_pressed) {
    1634:	d0a02303 	ldbu	r2,-32628(gp)
    1638:	1000151e 	bne	r2,zero,1690 <main+0x154>
    163c:	d0a02243 	ldbu	r2,-32631(gp)
    1640:	10001326 	beq	r2,zero,1690 <main+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1644:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1648:	1c04703a 	and	r2,r3,r16
    164c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    1650:	d0a02617 	ldw	r2,-32616(gp)
    1654:	10800114 	ori	r2,r2,4
    1658:	d0a02615 	stw	r2,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    165c:	d0a02617 	ldw	r2,-32616(gp)
    1660:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1664:	1801703a 	wrctl	status,r3
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1668:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    166c:	1c04703a 	and	r2,r3,r16
    1670:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    1674:	d0a02617 	ldw	r2,-32616(gp)
    1678:	10800214 	ori	r2,r2,8
    167c:	d0a02615 	stw	r2,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1680:	d0a02617 	ldw	r2,-32616(gp)
    1684:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1688:	1801703a 	wrctl	status,r3
			alt_irq_enable(BTN_UP_IRQ);
			alt_irq_enable(BTN_DOWN_IRQ);
			ud_buttons_en = TRUE;
    168c:	d4a02305 	stb	r18,-32628(gp)
		}

//		changevariable (*swc_sel, 1);
		if (up_pressed) {
    1690:	d0a022c3 	ldbu	r2,-32629(gp)
    1694:	10001326 	beq	r2,zero,16e4 <main+0x1a8>
			if (*swc_sel == 0) {
    1698:	d0a00517 	ldw	r2,-32748(gp)
    169c:	10800003 	ldbu	r2,0(r2)
    16a0:	10803fcc 	andi	r2,r2,255
    16a4:	1000081e 	bne	r2,zero,16c8 <main+0x18c>
				if (hour[1]<60)
    16a8:	d0a0248b 	ldhu	r2,-32622(gp)
    16ac:	10ffffcc 	andi	r3,r2,65535
    16b0:	88c00336 	bltu	r17,r3,16c0 <main+0x184>
					hour[1]++;
    16b4:	10800044 	addi	r2,r2,1
    16b8:	d0a0248d 	sth	r2,-32622(gp)
    16bc:	00000906 	br	16e4 <main+0x1a8>
				else
					hour[1] = 0;
    16c0:	d020248d 	sth	zero,-32622(gp)
    16c4:	00000706 	br	16e4 <main+0x1a8>
			} else {
				if (alarm[1]<60)
    16c8:	d0a0010b 	ldhu	r2,-32764(gp)
    16cc:	10ffffcc 	andi	r3,r2,65535
    16d0:	88c00336 	bltu	r17,r3,16e0 <main+0x1a4>
					alarm[1]++;
    16d4:	10800044 	addi	r2,r2,1
    16d8:	d0a0010d 	sth	r2,-32764(gp)
    16dc:	00000106 	br	16e4 <main+0x1a8>
				else
					alarm[1] = 0;
    16e0:	d020010d 	sth	zero,-32764(gp)
//				}
//			} else {
//				alarm[1] = 0;
//			}

		up_pressed = FALSE;
    16e4:	d02022c5 	stb	zero,-32629(gp)
		down_pressed = FALSE;
    16e8:	d0202285 	stb	zero,-32630(gp)
		set_pressed = FALSE;
    16ec:	d0202245 	stb	zero,-32631(gp)
		button_pressed = FALSE;
    16f0:	d0202205 	stb	zero,-32632(gp)

		display_hour();
    16f4:	00013680 	call	1368 <display_hour>
	}
    16f8:	003fce06 	br	1634 <_gp+0xffff7884>

000016fc <__divsi3>:
    16fc:	20001b16 	blt	r4,zero,176c <__divsi3+0x70>
    1700:	000f883a 	mov	r7,zero
    1704:	28001616 	blt	r5,zero,1760 <__divsi3+0x64>
    1708:	200d883a 	mov	r6,r4
    170c:	29001a2e 	bgeu	r5,r4,1778 <__divsi3+0x7c>
    1710:	00800804 	movi	r2,32
    1714:	00c00044 	movi	r3,1
    1718:	00000106 	br	1720 <__divsi3+0x24>
    171c:	10000d26 	beq	r2,zero,1754 <__divsi3+0x58>
    1720:	294b883a 	add	r5,r5,r5
    1724:	10bfffc4 	addi	r2,r2,-1
    1728:	18c7883a 	add	r3,r3,r3
    172c:	293ffb36 	bltu	r5,r4,171c <_gp+0xffff796c>
    1730:	0005883a 	mov	r2,zero
    1734:	18000726 	beq	r3,zero,1754 <__divsi3+0x58>
    1738:	0005883a 	mov	r2,zero
    173c:	31400236 	bltu	r6,r5,1748 <__divsi3+0x4c>
    1740:	314dc83a 	sub	r6,r6,r5
    1744:	10c4b03a 	or	r2,r2,r3
    1748:	1806d07a 	srli	r3,r3,1
    174c:	280ad07a 	srli	r5,r5,1
    1750:	183ffa1e 	bne	r3,zero,173c <_gp+0xffff798c>
    1754:	38000126 	beq	r7,zero,175c <__divsi3+0x60>
    1758:	0085c83a 	sub	r2,zero,r2
    175c:	f800283a 	ret
    1760:	014bc83a 	sub	r5,zero,r5
    1764:	39c0005c 	xori	r7,r7,1
    1768:	003fe706 	br	1708 <_gp+0xffff7958>
    176c:	0109c83a 	sub	r4,zero,r4
    1770:	01c00044 	movi	r7,1
    1774:	003fe306 	br	1704 <_gp+0xffff7954>
    1778:	00c00044 	movi	r3,1
    177c:	003fee06 	br	1738 <_gp+0xffff7988>

00001780 <__modsi3>:
    1780:	20001716 	blt	r4,zero,17e0 <__modsi3+0x60>
    1784:	000f883a 	mov	r7,zero
    1788:	2005883a 	mov	r2,r4
    178c:	28001216 	blt	r5,zero,17d8 <__modsi3+0x58>
    1790:	2900162e 	bgeu	r5,r4,17ec <__modsi3+0x6c>
    1794:	01800804 	movi	r6,32
    1798:	00c00044 	movi	r3,1
    179c:	00000106 	br	17a4 <__modsi3+0x24>
    17a0:	30000a26 	beq	r6,zero,17cc <__modsi3+0x4c>
    17a4:	294b883a 	add	r5,r5,r5
    17a8:	31bfffc4 	addi	r6,r6,-1
    17ac:	18c7883a 	add	r3,r3,r3
    17b0:	293ffb36 	bltu	r5,r4,17a0 <_gp+0xffff79f0>
    17b4:	18000526 	beq	r3,zero,17cc <__modsi3+0x4c>
    17b8:	1806d07a 	srli	r3,r3,1
    17bc:	11400136 	bltu	r2,r5,17c4 <__modsi3+0x44>
    17c0:	1145c83a 	sub	r2,r2,r5
    17c4:	280ad07a 	srli	r5,r5,1
    17c8:	183ffb1e 	bne	r3,zero,17b8 <_gp+0xffff7a08>
    17cc:	38000126 	beq	r7,zero,17d4 <__modsi3+0x54>
    17d0:	0085c83a 	sub	r2,zero,r2
    17d4:	f800283a 	ret
    17d8:	014bc83a 	sub	r5,zero,r5
    17dc:	003fec06 	br	1790 <_gp+0xffff79e0>
    17e0:	0109c83a 	sub	r4,zero,r4
    17e4:	01c00044 	movi	r7,1
    17e8:	003fe706 	br	1788 <_gp+0xffff79d8>
    17ec:	00c00044 	movi	r3,1
    17f0:	003ff106 	br	17b8 <_gp+0xffff7a08>

000017f4 <__udivsi3>:
    17f4:	200d883a 	mov	r6,r4
    17f8:	2900152e 	bgeu	r5,r4,1850 <__udivsi3+0x5c>
    17fc:	28001416 	blt	r5,zero,1850 <__udivsi3+0x5c>
    1800:	00800804 	movi	r2,32
    1804:	00c00044 	movi	r3,1
    1808:	00000206 	br	1814 <__udivsi3+0x20>
    180c:	10000e26 	beq	r2,zero,1848 <__udivsi3+0x54>
    1810:	28000516 	blt	r5,zero,1828 <__udivsi3+0x34>
    1814:	294b883a 	add	r5,r5,r5
    1818:	10bfffc4 	addi	r2,r2,-1
    181c:	18c7883a 	add	r3,r3,r3
    1820:	293ffa36 	bltu	r5,r4,180c <_gp+0xffff7a5c>
    1824:	18000826 	beq	r3,zero,1848 <__udivsi3+0x54>
    1828:	0005883a 	mov	r2,zero
    182c:	31400236 	bltu	r6,r5,1838 <__udivsi3+0x44>
    1830:	314dc83a 	sub	r6,r6,r5
    1834:	10c4b03a 	or	r2,r2,r3
    1838:	1806d07a 	srli	r3,r3,1
    183c:	280ad07a 	srli	r5,r5,1
    1840:	183ffa1e 	bne	r3,zero,182c <_gp+0xffff7a7c>
    1844:	f800283a 	ret
    1848:	0005883a 	mov	r2,zero
    184c:	f800283a 	ret
    1850:	00c00044 	movi	r3,1
    1854:	003ff406 	br	1828 <_gp+0xffff7a78>

00001858 <__umodsi3>:
    1858:	2005883a 	mov	r2,r4
    185c:	2900122e 	bgeu	r5,r4,18a8 <__umodsi3+0x50>
    1860:	28001116 	blt	r5,zero,18a8 <__umodsi3+0x50>
    1864:	01800804 	movi	r6,32
    1868:	00c00044 	movi	r3,1
    186c:	00000206 	br	1878 <__umodsi3+0x20>
    1870:	30000c26 	beq	r6,zero,18a4 <__umodsi3+0x4c>
    1874:	28000516 	blt	r5,zero,188c <__umodsi3+0x34>
    1878:	294b883a 	add	r5,r5,r5
    187c:	31bfffc4 	addi	r6,r6,-1
    1880:	18c7883a 	add	r3,r3,r3
    1884:	293ffa36 	bltu	r5,r4,1870 <_gp+0xffff7ac0>
    1888:	18000626 	beq	r3,zero,18a4 <__umodsi3+0x4c>
    188c:	1806d07a 	srli	r3,r3,1
    1890:	11400136 	bltu	r2,r5,1898 <__umodsi3+0x40>
    1894:	1145c83a 	sub	r2,r2,r5
    1898:	280ad07a 	srli	r5,r5,1
    189c:	183ffb1e 	bne	r3,zero,188c <_gp+0xffff7adc>
    18a0:	f800283a 	ret
    18a4:	f800283a 	ret
    18a8:	00c00044 	movi	r3,1
    18ac:	003ff706 	br	188c <_gp+0xffff7adc>

000018b0 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    18b0:	008007c4 	movi	r2,31
    18b4:	11002136 	bltu	r2,r4,193c <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    18b8:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    18bc:	00ffff84 	movi	r3,-2
    18c0:	38c4703a 	and	r2,r7,r3
    18c4:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    18c8:	200490fa 	slli	r2,r4,3
    18cc:	02000034 	movhi	r8,0
    18d0:	42079704 	addi	r8,r8,7772
    18d4:	4085883a 	add	r2,r8,r2
    18d8:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    18dc:	11400115 	stw	r5,4(r2)
    18e0:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    18e4:	30000726 	beq	r6,zero,1904 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    18e8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    18ec:	28c6703a 	and	r3,r5,r3
    18f0:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    18f4:	d0e02617 	ldw	r3,-32616(gp)
    18f8:	1104983a 	sll	r2,r2,r4
    18fc:	10c4b03a 	or	r2,r2,r3
    1900:	00000706 	br	1920 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1904:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1908:	28c6703a 	and	r3,r5,r3
    190c:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    1910:	1104983a 	sll	r2,r2,r4
    1914:	d0e02617 	ldw	r3,-32616(gp)
    1918:	0084303a 	nor	r2,zero,r2
    191c:	10c4703a 	and	r2,r2,r3
    1920:	d0a02615 	stw	r2,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1924:	d0a02617 	ldw	r2,-32616(gp)
    1928:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    192c:	2801703a 	wrctl	status,r5
    1930:	3801703a 	wrctl	status,r7
    1934:	0005883a 	mov	r2,zero
    1938:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
    193c:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
    1940:	f800283a 	ret

00001944 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1944:	deffff04 	addi	sp,sp,-4
    1948:	01000034 	movhi	r4,0
    194c:	01400034 	movhi	r5,0
    1950:	dfc00015 	stw	ra,0(sp)
    1954:	21076c04 	addi	r4,r4,7600
    1958:	29477d04 	addi	r5,r5,7668

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    195c:	2140061e 	bne	r4,r5,1978 <alt_load+0x34>
    1960:	01000034 	movhi	r4,0
    1964:	01400034 	movhi	r5,0
    1968:	21040804 	addi	r4,r4,4128
    196c:	29440804 	addi	r5,r5,4128
    1970:	2140121e 	bne	r4,r5,19bc <alt_load+0x78>
    1974:	00000b06 	br	19a4 <alt_load+0x60>
    1978:	00c00034 	movhi	r3,0
    197c:	18c77d04 	addi	r3,r3,7668
    1980:	1907c83a 	sub	r3,r3,r4
    1984:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1988:	10fff526 	beq	r2,r3,1960 <_gp+0xffff7bb0>
    {
      *to++ = *from++;
    198c:	114f883a 	add	r7,r2,r5
    1990:	39c00017 	ldw	r7,0(r7)
    1994:	110d883a 	add	r6,r2,r4
    1998:	10800104 	addi	r2,r2,4
    199c:	31c00015 	stw	r7,0(r6)
    19a0:	003ff906 	br	1988 <_gp+0xffff7bd8>
    19a4:	01000034 	movhi	r4,0
    19a8:	01400034 	movhi	r5,0
    19ac:	21074e04 	addi	r4,r4,7480
    19b0:	29474e04 	addi	r5,r5,7480

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    19b4:	2140101e 	bne	r4,r5,19f8 <alt_load+0xb4>
    19b8:	00000b06 	br	19e8 <alt_load+0xa4>
    19bc:	00c00034 	movhi	r3,0
    19c0:	18c46004 	addi	r3,r3,4480
    19c4:	1907c83a 	sub	r3,r3,r4
    19c8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    19cc:	10fff526 	beq	r2,r3,19a4 <_gp+0xffff7bf4>
    {
      *to++ = *from++;
    19d0:	114f883a 	add	r7,r2,r5
    19d4:	39c00017 	ldw	r7,0(r7)
    19d8:	110d883a 	add	r6,r2,r4
    19dc:	10800104 	addi	r2,r2,4
    19e0:	31c00015 	stw	r7,0(r6)
    19e4:	003ff906 	br	19cc <_gp+0xffff7c1c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    19e8:	0001c980 	call	1c98 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    19ec:	dfc00017 	ldw	ra,0(sp)
    19f0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    19f4:	0001c9c1 	jmpi	1c9c <alt_icache_flush_all>
    19f8:	00c00034 	movhi	r3,0
    19fc:	18c76c04 	addi	r3,r3,7600
    1a00:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1a04:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1a08:	18bff726 	beq	r3,r2,19e8 <_gp+0xffff7c38>
    {
      *to++ = *from++;
    1a0c:	114f883a 	add	r7,r2,r5
    1a10:	39c00017 	ldw	r7,0(r7)
    1a14:	110d883a 	add	r6,r2,r4
    1a18:	10800104 	addi	r2,r2,4
    1a1c:	31c00015 	stw	r7,0(r6)
    1a20:	003ff906 	br	1a08 <_gp+0xffff7c58>

00001a24 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1a24:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1a28:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1a2c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1a30:	0001c400 	call	1c40 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1a34:	0001c600 	call	1c60 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1a38:	d1a02717 	ldw	r6,-32612(gp)
    1a3c:	d1602817 	ldw	r5,-32608(gp)
    1a40:	d1202917 	ldw	r4,-32604(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1a44:	dfc00017 	ldw	ra,0(sp)
    1a48:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1a4c:	000153c1 	jmpi	153c <main>

00001a50 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    1a50:	defff204 	addi	sp,sp,-56
    1a54:	2005883a 	mov	r2,r4
    1a58:	dfc00a15 	stw	ra,40(sp)
    1a5c:	df000915 	stw	fp,36(sp)
    1a60:	ddc00815 	stw	r23,32(sp)
    1a64:	dd800715 	stw	r22,28(sp)
    1a68:	dd400615 	stw	r21,24(sp)
    1a6c:	dd000515 	stw	r20,20(sp)
    1a70:	dcc00415 	stw	r19,16(sp)
    1a74:	dc800315 	stw	r18,12(sp)
    1a78:	dc400215 	stw	r17,8(sp)
    1a7c:	dc000115 	stw	r16,4(sp)
    1a80:	d9400b15 	stw	r5,44(sp)
    1a84:	d9800c15 	stw	r6,48(sp)
    1a88:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    1a8c:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
    1a90:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    1a94:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    1a98:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    1a9c:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    1aa0:	11000007 	ldb	r4,0(r2)
    1aa4:	20003a26 	beq	r4,zero,1b90 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    1aa8:	24000226 	beq	r4,r16,1ab4 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    1aac:	14400044 	addi	r17,r2,1
    1ab0:	00001406 	br	1b04 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    1ab4:	14400084 	addi	r17,r2,2
    1ab8:	10800047 	ldb	r2,1(r2)
    1abc:	10003426 	beq	r2,zero,1b90 <alt_printf+0x140>
            {
                if (c == '%')
    1ac0:	1400021e 	bne	r2,r16,1acc <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    1ac4:	8009883a 	mov	r4,r16
    1ac8:	00000e06 	br	1b04 <alt_printf+0xb4>
                } 
                else if (c == 'c')
    1acc:	1480051e 	bne	r2,r18,1ae4 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    1ad0:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    1ad4:	ad800104 	addi	r22,r21,4
    1ad8:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
    1adc:	0001bc00 	call	1bc0 <alt_putchar>
    1ae0:	00002906 	br	1b88 <alt_printf+0x138>
                }
                else if (c == 'x')
    1ae4:	14c0201e 	bne	r2,r19,1b68 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    1ae8:	adc00017 	ldw	r23,0(r21)
    1aec:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    1af0:	b8000326 	beq	r23,zero,1b00 <alt_printf+0xb0>
    1af4:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    1af8:	00c003c4 	movi	r3,15
    1afc:	00000306 	br	1b0c <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    1b00:	01000c04 	movi	r4,48
    1b04:	0001bc00 	call	1bc0 <alt_putchar>
                        continue;
    1b08:	00001f06 	br	1b88 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    1b0c:	1d84983a 	sll	r2,r3,r22
    1b10:	15c4703a 	and	r2,r2,r23
    1b14:	1000021e 	bne	r2,zero,1b20 <alt_printf+0xd0>
                        digit_shift -= 4;
    1b18:	b5bfff04 	addi	r22,r22,-4
    1b1c:	003ffb06 	br	1b0c <_gp+0xffff7d5c>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    1b20:	070003c4 	movi	fp,15
                        if (digit <= 9)
    1b24:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    1b28:	b0001716 	blt	r22,zero,1b88 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    1b2c:	e588983a 	sll	r4,fp,r22
    1b30:	25c8703a 	and	r4,r4,r23
    1b34:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
    1b38:	19000236 	bltu	r3,r4,1b44 <alt_printf+0xf4>
                            c = '0' + digit;
    1b3c:	21000c04 	addi	r4,r4,48
    1b40:	00000106 	br	1b48 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
    1b44:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
    1b48:	21003fcc 	andi	r4,r4,255
    1b4c:	2100201c 	xori	r4,r4,128
    1b50:	213fe004 	addi	r4,r4,-128
    1b54:	d8c00015 	stw	r3,0(sp)
    1b58:	0001bc00 	call	1bc0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    1b5c:	b5bfff04 	addi	r22,r22,-4
    1b60:	d8c00017 	ldw	r3,0(sp)
    1b64:	003ff006 	br	1b28 <_gp+0xffff7d78>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    1b68:	1500071e 	bne	r2,r20,1b88 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    1b6c:	ad800017 	ldw	r22,0(r21)
    1b70:	ad400104 	addi	r21,r21,4

                    while(*s)
    1b74:	b1000007 	ldb	r4,0(r22)
    1b78:	20000326 	beq	r4,zero,1b88 <alt_printf+0x138>
                      alt_putchar(*s++);
    1b7c:	b5800044 	addi	r22,r22,1
    1b80:	0001bc00 	call	1bc0 <alt_putchar>
    1b84:	003ffb06 	br	1b74 <_gp+0xffff7dc4>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    1b88:	8805883a 	mov	r2,r17
    1b8c:	003fc406 	br	1aa0 <_gp+0xffff7cf0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    1b90:	dfc00a17 	ldw	ra,40(sp)
    1b94:	df000917 	ldw	fp,36(sp)
    1b98:	ddc00817 	ldw	r23,32(sp)
    1b9c:	dd800717 	ldw	r22,28(sp)
    1ba0:	dd400617 	ldw	r21,24(sp)
    1ba4:	dd000517 	ldw	r20,20(sp)
    1ba8:	dcc00417 	ldw	r19,16(sp)
    1bac:	dc800317 	ldw	r18,12(sp)
    1bb0:	dc400217 	ldw	r17,8(sp)
    1bb4:	dc000117 	ldw	r16,4(sp)
    1bb8:	dec00e04 	addi	sp,sp,56
    1bbc:	f800283a 	ret

00001bc0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1bc0:	defffd04 	addi	sp,sp,-12
    1bc4:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    1bc8:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1bcc:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    1bd0:	01000034 	movhi	r4,0
    1bd4:	000f883a 	mov	r7,zero
    1bd8:	01800044 	movi	r6,1
    1bdc:	d80b883a 	mov	r5,sp
    1be0:	21077c04 	addi	r4,r4,7664
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1be4:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    1be8:	0001c640 	call	1c64 <altera_avalon_jtag_uart_write>
    1bec:	00ffffc4 	movi	r3,-1
    1bf0:	10c00126 	beq	r2,r3,1bf8 <alt_putchar+0x38>
        return -1;
    }
    return c;
    1bf4:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    1bf8:	dfc00217 	ldw	ra,8(sp)
    1bfc:	dc000117 	ldw	r16,4(sp)
    1c00:	dec00304 	addi	sp,sp,12
    1c04:	f800283a 	ret

00001c08 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    1c08:	defffe04 	addi	sp,sp,-8
    1c0c:	dc000015 	stw	r16,0(sp)
    1c10:	dfc00115 	stw	ra,4(sp)
    1c14:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1c18:	0001d1c0 	call	1d1c <strlen>
    1c1c:	01000034 	movhi	r4,0
    1c20:	000f883a 	mov	r7,zero
    1c24:	100d883a 	mov	r6,r2
    1c28:	800b883a 	mov	r5,r16
    1c2c:	21077c04 	addi	r4,r4,7664
#else
    return fputs(str, stdout);
#endif
#endif
}
    1c30:	dfc00117 	ldw	ra,4(sp)
    1c34:	dc000017 	ldw	r16,0(sp)
    1c38:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1c3c:	0001c641 	jmpi	1c64 <altera_avalon_jtag_uart_write>

00001c40 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1c40:	deffff04 	addi	sp,sp,-4
    1c44:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
    1c48:	0001ca00 	call	1ca0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1c4c:	00800044 	movi	r2,1
    1c50:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1c54:	dfc00017 	ldw	ra,0(sp)
    1c58:	dec00104 	addi	sp,sp,4
    1c5c:	f800283a 	ret

00001c60 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1c60:	f800283a 	ret

00001c64 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1c64:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1c68:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1c6c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1c70:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1c74:	2980072e 	bgeu	r5,r6,1c94 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1c78:	38c00037 	ldwio	r3,0(r7)
    1c7c:	18ffffec 	andhi	r3,r3,65535
    1c80:	183ffc26 	beq	r3,zero,1c74 <_gp+0xffff7ec4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1c84:	28c00007 	ldb	r3,0(r5)
    1c88:	20c00035 	stwio	r3,0(r4)
    1c8c:	29400044 	addi	r5,r5,1
    1c90:	003ff806 	br	1c74 <_gp+0xffff7ec4>

  return count;
}
    1c94:	f800283a 	ret

00001c98 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1c98:	f800283a 	ret

00001c9c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1c9c:	f800283a 	ret

00001ca0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1ca0:	000170fa 	wrctl	ienable,zero
    1ca4:	f800283a 	ret

00001ca8 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    1ca8:	213ffe84 	addi	r4,r4,-6
    1cac:	008003c4 	movi	r2,15
    1cb0:	11001636 	bltu	r2,r4,1d0c <alt_exception_cause_generated_bad_addr+0x64>
    1cb4:	200890ba 	slli	r4,r4,2
    1cb8:	00800034 	movhi	r2,0
    1cbc:	10873304 	addi	r2,r2,7372
    1cc0:	2089883a 	add	r4,r4,r2
    1cc4:	20800017 	ldw	r2,0(r4)
    1cc8:	1000683a 	jmp	r2
    1ccc:	00001d14 	movui	zero,116
    1cd0:	00001d14 	movui	zero,116
    1cd4:	00001d0c 	andi	zero,zero,116
    1cd8:	00001d0c 	andi	zero,zero,116
    1cdc:	00001d0c 	andi	zero,zero,116
    1ce0:	00001d14 	movui	zero,116
    1ce4:	00001d0c 	andi	zero,zero,116
    1ce8:	00001d0c 	andi	zero,zero,116
    1cec:	00001d14 	movui	zero,116
    1cf0:	00001d14 	movui	zero,116
    1cf4:	00001d0c 	andi	zero,zero,116
    1cf8:	00001d14 	movui	zero,116
    1cfc:	00001d0c 	andi	zero,zero,116
    1d00:	00001d0c 	andi	zero,zero,116
    1d04:	00001d0c 	andi	zero,zero,116
    1d08:	00001d14 	movui	zero,116
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    1d0c:	0005883a 	mov	r2,zero
    1d10:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    1d14:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    1d18:	f800283a 	ret

00001d1c <strlen>:
    1d1c:	2005883a 	mov	r2,r4
    1d20:	10c00007 	ldb	r3,0(r2)
    1d24:	18000226 	beq	r3,zero,1d30 <strlen+0x14>
    1d28:	10800044 	addi	r2,r2,1
    1d2c:	003ffc06 	br	1d20 <_gp+0xffff7f70>
    1d30:	1105c83a 	sub	r2,r2,r4
    1d34:	f800283a 	ret
