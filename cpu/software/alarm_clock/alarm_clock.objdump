
alarm_clock.elf:     file format elf32-littlenios2
alarm_clock.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001180

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000bac memsz 0x00000bac flags r-x
    LOAD off    0x00001bcc vaddr 0x00001bcc paddr 0x00001c0c align 2**12
         filesz 0x00000040 memsz 0x00000040 flags rw-
    LOAD off    0x00001c4c vaddr 0x00001c4c paddr 0x00001c4c align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000009d8  00001180  00001180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000074  00001b58  00001b58  00001b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000040  00001bcc  00001c0c  00001bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00001c4c  00001c4c  00001c4c  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00001d70  00001d70  00001c0c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002d0  00000000  00000000  00001c30  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001fa2  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f77  00000000  00000000  00003ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000f25  00000000  00000000  00004e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003c8  00000000  00000000  00005d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000fc3  00000000  00000000  00006108  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000bc1  00000000  00000000  000070cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00007c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001e8  00000000  00000000  00007ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000091a5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000091a8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000091ab  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000091ac  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  000091ad  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  000091b1  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  000091b5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  000091b9  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000006e  00000000  00000000  000091bf  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00077c1e  00000000  00000000  0000922d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001180 l    d  .text	00000000 .text
00001b58 l    d  .rodata	00000000 .rodata
00001bcc l    d  .rwdata	00000000 .rwdata
00001c4c l    d  .bss	00000000 .bss
00001d70 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_clock_bsp//obj/HAL/src/crt0.o
000011b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000011bc l     F .text	0000000c btn_set_clock_respond
000011c8 l     F .text	0000000c btn_set_alarm_respond
000011d4 l     F .text	0000000c btn_down_respond
000011e0 l     F .text	0000000c btn_up_respond
000012c0 l     F .text	000000c8 respond
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00001c6c g     O .bss	00000004 alt_instruction_exception_handler
00001830 g     F .text	0000002c alt_main
00001c70 g     O .bss	00000100 alt_irq
00001c0c g       *ABS*	00000000 __flash_rwdata_start
00001c08 g     O .rwdata	00000004 UART
00001388 g     F .text	0000003c init_values
00001c64 g     O .bss	00000004 altera_avalon_timer_ts_freq
00001be4 g     O .rwdata	00000004 set_clock_ptr
00001a14 g     F .text	00000038 alt_putstr
00001ac0 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001bfc g     O .rwdata	00000004 h0_ptr
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001bf8 g     O .rwdata	00000004 m1_ptr
00001c5c g     O .bss	00000004 alt_argv
00009bcc g       *ABS*	00000000 _gp
00001ac8 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00001bec g     O .rwdata	00000004 s0_ptr
00001bdc g     O .rwdata	00000004 down_ptr
00001600 g     F .text	00000064 .hidden __udivsi3
00001bf4 g     O .rwdata	00000004 m0_ptr
000016bc g     F .text	00000094 alt_irq_register
00001d70 g       *ABS*	00000000 __bss_end
00001bd0 g     O .rwdata	00000006 alarm
00001c54 g     O .bss	00000004 alt_irq_active
000010fc g     F .exceptions	00000060 alt_irq_handler
00001ab8 g     F .text	00000004 alt_dcache_flush_all
00001bf0 g     O .rwdata	00000004 s1_ptr
00001c0c g       *ABS*	00000000 __ram_rwdata_end
00001bcc g       *ABS*	00000000 __ram_rodata_end
00001664 g     F .text	00000058 .hidden __umodsi3
00001d70 g       *ABS*	00000000 end
0000115c g     F .exceptions	00000024 alt_instruction_exception_entry
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001a84 g     F .text	00000034 altera_avalon_jtag_uart_write
0000185c g     F .text	00000170 alt_printf
00001be0 g     O .rwdata	00000004 up_ptr
00001180 g     F .text	0000003c _start
00001a6c g     F .text	00000018 alt_sys_init
00001c00 g     O .rwdata	00000004 h1_ptr
00001bcc g       *ABS*	00000000 __ram_rwdata_start
00001b58 g       *ABS*	00000000 __ram_rodata_start
00001c4e g     O .bss	00000006 hour
00001d70 g       *ABS*	00000000 __alt_stack_base
000011ec g     F .text	00000060 add_second
00001c4c g       *ABS*	00000000 __bss_start
0000141c g     F .text	000000ec main
00001000 g       *ABS*	00000000 __alt_mem_RAM
00001c58 g     O .bss	00000004 alt_envp
00001508 g     F .text	00000084 .hidden __divsi3
00001be8 g     O .rwdata	00000004 set_alarm_ptr
000013c4 g     F .text	00000058 set_value
00001b58 g       *ABS*	00000000 __flash_rodata_start
00001bcc g     O .rwdata	00000004 timer_base_ptr
00001a4c g     F .text	00000020 alt_irq_init
00001bd8 g     O .rwdata	00000004 alarm_ptr
00001c60 g     O .bss	00000004 alt_argc
00001c68 g     O .bss	00000004 altera_avalon_timer_ts_base
00001020 g       .exceptions	00000000 alt_irq_entry
0000124c g     F .text	00000074 display_hour
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001c0c g       *ABS*	00000000 _edata
00001d70 g       *ABS*	00000000 _end
00001180 g       *ABS*	00000000 __ram_exceptions_end
0000158c g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
00001020 g     F .exceptions	00000000 alt_exception
00001c4c g     O .bss	00000002 is_activated
0000100c g       .entry	00000000 _exit
00001b3c g     F .text	0000001c strlen
000019cc g     F .text	00000048 alt_putchar
00001abc g     F .text	00000004 alt_icache_flush_all
00001c04 g     O .rwdata	00000004 alt_priority_mask
00001750 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08446014 	ori	at,at,4480
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .exceptions:

00001020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    1020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    1024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    1028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    102c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    1030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    1034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    1038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    103c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    1040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    1044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    1048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    104c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    1050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    1054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    1058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    105c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    1060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    1064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    1068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    106c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    1070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    1074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    1078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    107c:	10000326 	beq	r2,zero,108c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    1080:	20000226 	beq	r4,zero,108c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    1084:	00010fc0 	call	10fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    1088:	00000706 	br	10a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    108c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    1090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    1094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    1098:	000115c0 	call	115c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    109c:	1000021e 	bne	r2,zero,10a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    10a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    10a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    10a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    10ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    10b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    10b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    10b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    10bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    10c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    10c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    10c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    10cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    10d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    10d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    10d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    10dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    10e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    10e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    10e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    10ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    10f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    10f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    10f8:	ef80083a 	eret

000010fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    10fc:	defffe04 	addi	sp,sp,-8
    1100:	dfc00115 	stw	ra,4(sp)
    1104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    1108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    110c:	04000034 	movhi	r16,0
    1110:	84071c04 	addi	r16,r16,7280

  active = alt_irq_pending ();

  do
  {
    i = 0;
    1114:	0005883a 	mov	r2,zero
    mask = 1;
    1118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    111c:	20ca703a 	and	r5,r4,r3
    1120:	28000b26 	beq	r5,zero,1150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    1124:	100490fa 	slli	r2,r2,3
    1128:	8085883a 	add	r2,r16,r2
    112c:	10c00017 	ldw	r3,0(r2)
    1130:	11000117 	ldw	r4,4(r2)
    1134:	183ee83a 	callr	r3
    1138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    113c:	203ff51e 	bne	r4,zero,1114 <_gp+0xffff7548>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	dc000017 	ldw	r16,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    1150:	18c7883a 	add	r3,r3,r3
      i++;
    1154:	10800044 	addi	r2,r2,1

    } while (1);
    1158:	003ff006 	br	111c <_gp+0xffff7550>

0000115c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    115c:	d0a02817 	ldw	r2,-32608(gp)
    1160:	10000426 	beq	r2,zero,1174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    1164:	200b883a 	mov	r5,r4
    1168:	000d883a 	mov	r6,zero
    116c:	013fffc4 	movi	r4,-1
    1170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    1174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    1178:	0005883a 	mov	r2,zero
    117c:	f800283a 	ret

Disassembly of section .text:

00001180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1184:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    118c:	d6a6f314 	ori	gp,gp,39884
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1194:	10871314 	ori	r2,r2,7244

    movhi r3, %hi(__bss_end)
    1198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    119c:	18c75c14 	ori	r3,r3,7536

    beq r2, r3, 1f
    11a0:	10c00326 	beq	r2,r3,11b0 <_start+0x30>

0:
    stw zero, (r2)
    11a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    11a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    11ac:	10fffd36 	bltu	r2,r3,11a4 <_gp+0xffff75d8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    11b0:	00017500 	call	1750 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    11b4:	00018300 	call	1830 <alt_main>

000011b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    11b8:	003fff06 	br	11b8 <_gp+0xffff75ec>

000011bc <btn_set_clock_respond>:
	alt_printf("Boton set alarm\n");
}

static void btn_set_clock_respond(){
	//logica del boton set_clock.
	alt_printf("Boton set clock\n");
    11bc:	01000034 	movhi	r4,0
    11c0:	2106d604 	addi	r4,r4,7000
    11c4:	000185c1 	jmpi	185c <alt_printf>

000011c8 <btn_set_alarm_respond>:
	alt_printf("Boton down\n");
}

static void btn_set_alarm_respond(void* context, alt_u32 id){
	//logica del boton set_alarm.
	alt_printf("Boton set alarm\n");
    11c8:	01000034 	movhi	r4,0
    11cc:	2106db04 	addi	r4,r4,7020
    11d0:	000185c1 	jmpi	185c <alt_printf>

000011d4 <btn_down_respond>:
	//logica del boton up.
	alt_printf("Boton up\n");
}
static void btn_down_respond(void* context, alt_u32 id){
	//logica del boton down.
	alt_printf("Boton down\n");
    11d4:	01000034 	movhi	r4,0
    11d8:	2106e004 	addi	r4,r4,7040
    11dc:	000185c1 	jmpi	185c <alt_printf>

000011e0 <btn_up_respond>:
//Timer pointer
volatile uchar *timer_base_ptr = (uchar *)TIMER_BASE;

static void btn_up_respond(void* context, alt_u32 id){
	//logica del boton up.
	alt_printf("Boton up\n");
    11e0:	01000034 	movhi	r4,0
    11e4:	2106e304 	addi	r4,r4,7052
    11e8:	000185c1 	jmpi	185c <alt_printf>

000011ec <add_second>:
 * Update the value of a specific display
 */
void add_second()
{
	// Add a second
	hour[0]++;
    11ec:	d0a0208b 	ldhu	r2,-32638(gp)

	if (hour[0] == 60)
    11f0:	01000f04 	movi	r4,60
 * Update the value of a specific display
 */
void add_second()
{
	// Add a second
	hour[0]++;
    11f4:	10800044 	addi	r2,r2,1

	if (hour[0] == 60)
    11f8:	10ffffcc 	andi	r3,r2,65535
    11fc:	19000226 	beq	r3,r4,1208 <add_second+0x1c>
 * Update the value of a specific display
 */
void add_second()
{
	// Add a second
	hour[0]++;
    1200:	d0a0208d 	sth	r2,-32638(gp)
    1204:	f800283a 	ret

	if (hour[0] == 60)
	{
		hour[0] = 0;
		hour[1]++;
    1208:	d0a0210b 	ldhu	r2,-32636(gp)
	// Add a second
	hour[0]++;

	if (hour[0] == 60)
	{
		hour[0] = 0;
    120c:	d020208d 	sth	zero,-32638(gp)
		hour[1]++;
    1210:	10800044 	addi	r2,r2,1

		if (hour[1] == 60)
    1214:	113fffcc 	andi	r4,r2,65535
    1218:	20c00226 	beq	r4,r3,1224 <add_second+0x38>
	hour[0]++;

	if (hour[0] == 60)
	{
		hour[0] = 0;
		hour[1]++;
    121c:	d0a0210d 	sth	r2,-32636(gp)
    1220:	f800283a 	ret

		if (hour[1] == 60)
		{
			hour[1] = 0;
			hour[2]++;
    1224:	d0a0218b 	ldhu	r2,-32634(gp)
		hour[0] = 0;
		hour[1]++;

		if (hour[1] == 60)
		{
			hour[1] = 0;
    1228:	d020210d 	sth	zero,-32636(gp)
			hour[2]++;

			if (hour[2] == 24)
    122c:	00c00604 	movi	r3,24
		hour[1]++;

		if (hour[1] == 60)
		{
			hour[1] = 0;
			hour[2]++;
    1230:	10800044 	addi	r2,r2,1

			if (hour[2] == 24)
    1234:	113fffcc 	andi	r4,r2,65535
    1238:	20c00226 	beq	r4,r3,1244 <add_second+0x58>
		hour[1]++;

		if (hour[1] == 60)
		{
			hour[1] = 0;
			hour[2]++;
    123c:	d0a0218d 	sth	r2,-32634(gp)
    1240:	f800283a 	ret

			if (hour[2] == 24)
			{
				hour[2] = 0;
    1244:	d020218d 	sth	zero,-32634(gp)
    1248:	f800283a 	ret

0000124c <display_hour>:
	}
}

void display_hour()
{
	alt_printf("%x %x : %x %x : %x %x\n", *h1_ptr, *h0_ptr, *m1_ptr, *m0_ptr,
    124c:	d0a00d17 	ldw	r2,-32716(gp)
		}
	}
}

void display_hour()
{
    1250:	defffc04 	addi	sp,sp,-16
    1254:	dfc00315 	stw	ra,12(sp)
	alt_printf("%x %x : %x %x : %x %x\n", *h1_ptr, *h0_ptr, *m1_ptr, *m0_ptr,
    1258:	11400003 	ldbu	r5,0(r2)
    125c:	d0a00c17 	ldw	r2,-32720(gp)
									   *s1_ptr, *s0_ptr);
    1260:	d0e00917 	ldw	r3,-32732(gp)
    1264:	d1200817 	ldw	r4,-32736(gp)
	}
}

void display_hour()
{
	alt_printf("%x %x : %x %x : %x %x\n", *h1_ptr, *h0_ptr, *m1_ptr, *m0_ptr,
    1268:	11800003 	ldbu	r6,0(r2)
    126c:	d0a00b17 	ldw	r2,-32724(gp)
    1270:	29403fcc 	andi	r5,r5,255
    1274:	31803fcc 	andi	r6,r6,255
    1278:	11c00003 	ldbu	r7,0(r2)
    127c:	d0a00a17 	ldw	r2,-32728(gp)
    1280:	39c03fcc 	andi	r7,r7,255
    1284:	10800003 	ldbu	r2,0(r2)
									   *s1_ptr, *s0_ptr);
    1288:	18c00003 	ldbu	r3,0(r3)
    128c:	21000003 	ldbu	r4,0(r4)
	}
}

void display_hour()
{
	alt_printf("%x %x : %x %x : %x %x\n", *h1_ptr, *h0_ptr, *m1_ptr, *m0_ptr,
    1290:	10803fcc 	andi	r2,r2,255
    1294:	18c03fcc 	andi	r3,r3,255
    1298:	21003fcc 	andi	r4,r4,255
    129c:	d9000215 	stw	r4,8(sp)
    12a0:	01000034 	movhi	r4,0
    12a4:	d8c00115 	stw	r3,4(sp)
    12a8:	d8800015 	stw	r2,0(sp)
    12ac:	2106e604 	addi	r4,r4,7064
    12b0:	000185c0 	call	185c <alt_printf>
									   *s1_ptr, *s0_ptr);
}
    12b4:	dfc00317 	ldw	ra,12(sp)
    12b8:	dec00404 	addi	sp,sp,16
    12bc:	f800283a 	ret

000012c0 <respond>:
/**
 * Handler for timer interrupt.
 */
static void respond(void* context){
	//*timer_base_ptr = 0;
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
    12c0:	d0a00017 	ldw	r2,-32768(gp)
}

/**
 * Handler for timer interrupt.
 */
static void respond(void* context){
    12c4:	defffb04 	addi	sp,sp,-20
    12c8:	dfc00415 	stw	ra,16(sp)
    12cc:	dcc00315 	stw	r19,12(sp)
    12d0:	dc800215 	stw	r18,8(sp)
    12d4:	dc400115 	stw	r17,4(sp)
    12d8:	dc000015 	stw	r16,0(sp)
	//*timer_base_ptr = 0;
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
    12dc:	10000035 	stwio	zero,0(r2)
	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
    12e0:	d4202084 	addi	r16,gp,-32638
 * Handler for timer interrupt.
 */
static void respond(void* context){
	//*timer_base_ptr = 0;
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
	add_second();
    12e4:	00011ec0 	call	11ec <add_second>
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    12e8:	84400003 	ldbu	r17,0(r16)
static void respond(void* context){
	//*timer_base_ptr = 0;
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
    12ec:	d4e00917 	ldw	r19,-32732(gp)
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    12f0:	01400284 	movi	r5,10
    12f4:	8809883a 	mov	r4,r17
    12f8:	00016000 	call	1600 <__udivsi3>
static void respond(void* context){
	//*timer_base_ptr = 0;
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
    12fc:	d4a00817 	ldw	r18,-32736(gp)
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
    1300:	8809883a 	mov	r4,r17
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    1304:	98800005 	stb	r2,0(r19)
	*seg0 = (unsigned char) value % 10;
    1308:	01400284 	movi	r5,10
    130c:	00016640 	call	1664 <__umodsi3>
    1310:	90800005 	stb	r2,0(r18)
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    1314:	84400083 	ldbu	r17,2(r16)
	//*timer_base_ptr = 0;
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
    1318:	d4e00b17 	ldw	r19,-32724(gp)
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    131c:	01400284 	movi	r5,10
    1320:	8809883a 	mov	r4,r17
    1324:	00016000 	call	1600 <__udivsi3>
	//*timer_base_ptr = 0;
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
    1328:	d4a00a17 	ldw	r18,-32728(gp)
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
    132c:	8809883a 	mov	r4,r17
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    1330:	98800005 	stb	r2,0(r19)
	*seg0 = (unsigned char) value % 10;
    1334:	01400284 	movi	r5,10
    1338:	00016640 	call	1664 <__umodsi3>
    133c:	90800005 	stb	r2,0(r18)
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    1340:	84000103 	ldbu	r16,4(r16)
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
	set_value(hour[2], h1_ptr, h0_ptr);
    1344:	d4a00d17 	ldw	r18,-32716(gp)
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    1348:	01400284 	movi	r5,10
    134c:	8009883a 	mov	r4,r16
    1350:	00016000 	call	1600 <__udivsi3>
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
	set_value(hour[2], h1_ptr, h0_ptr);
    1354:	d4600c17 	ldw	r17,-32720(gp)
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
    1358:	01400284 	movi	r5,10
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    135c:	90800005 	stb	r2,0(r18)
	*seg0 = (unsigned char) value % 10;
    1360:	8009883a 	mov	r4,r16
    1364:	00016640 	call	1664 <__umodsi3>
    1368:	88800005 	stb	r2,0(r17)
	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
	set_value(hour[2], h1_ptr, h0_ptr);

	display_hour();
}
    136c:	dfc00417 	ldw	ra,16(sp)
    1370:	dcc00317 	ldw	r19,12(sp)
    1374:	dc800217 	ldw	r18,8(sp)
    1378:	dc400117 	ldw	r17,4(sp)
    137c:	dc000017 	ldw	r16,0(sp)
    1380:	dec00504 	addi	sp,sp,20

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
	set_value(hour[2], h1_ptr, h0_ptr);

	display_hour();
    1384:	000124c1 	jmpi	124c <display_hour>

00001388 <init_values>:
}

void init_values()
{
	// Init all pointer in zero
	*h1_ptr = 0;
    1388:	d0a00d17 	ldw	r2,-32716(gp)
    138c:	10000005 	stb	zero,0(r2)
	*h0_ptr = 0;
    1390:	d0a00c17 	ldw	r2,-32720(gp)
    1394:	10000005 	stb	zero,0(r2)
	*m1_ptr = 0;
    1398:	d0a00b17 	ldw	r2,-32724(gp)
    139c:	10000005 	stb	zero,0(r2)
	*m0_ptr = 0;
    13a0:	d0a00a17 	ldw	r2,-32728(gp)
    13a4:	10000005 	stb	zero,0(r2)
	*s1_ptr = 0;
    13a8:	d0a00917 	ldw	r2,-32732(gp)
    13ac:	10000005 	stb	zero,0(r2)
	*s0_ptr = 0;
    13b0:	d0a00817 	ldw	r2,-32736(gp)
    13b4:	10000005 	stb	zero,0(r2)

	// Alarm doesn't sound
	*alarm_ptr = 0;
    13b8:	d0a00317 	ldw	r2,-32756(gp)
    13bc:	10000005 	stb	zero,0(r2)
    13c0:	f800283a 	ret

000013c4 <set_value>:

/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
    13c4:	defffc04 	addi	sp,sp,-16
    13c8:	dc000015 	stw	r16,0(sp)
	*seg1 = (unsigned char) value / 10;
    13cc:	24003fcc 	andi	r16,r4,255

/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
    13d0:	dc800215 	stw	r18,8(sp)
	*seg1 = (unsigned char) value / 10;
    13d4:	8009883a 	mov	r4,r16

/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
    13d8:	2825883a 	mov	r18,r5
	*seg1 = (unsigned char) value / 10;
    13dc:	01400284 	movi	r5,10

/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
    13e0:	dfc00315 	stw	ra,12(sp)
    13e4:	dc400115 	stw	r17,4(sp)
    13e8:	3023883a 	mov	r17,r6
	*seg1 = (unsigned char) value / 10;
    13ec:	00016000 	call	1600 <__udivsi3>
    13f0:	90800005 	stb	r2,0(r18)
	*seg0 = (unsigned char) value % 10;
    13f4:	01400284 	movi	r5,10
    13f8:	8009883a 	mov	r4,r16
    13fc:	00016640 	call	1664 <__umodsi3>
    1400:	88800005 	stb	r2,0(r17)
}
    1404:	dfc00317 	ldw	ra,12(sp)
    1408:	dc800217 	ldw	r18,8(sp)
    140c:	dc400117 	ldw	r17,4(sp)
    1410:	dc000017 	ldw	r16,0(sp)
    1414:	dec00404 	addi	sp,sp,16
    1418:	f800283a 	ret

0000141c <main>:


int main()
{ 
  alt_putstr("Welcome to the Alarm Clock\n");
    141c:	01000034 	movhi	r4,0
	*seg0 = (unsigned char) value % 10;
}


int main()
{ 
    1420:	defffd04 	addi	sp,sp,-12
  alt_putstr("Welcome to the Alarm Clock\n");
    1424:	2106ec04 	addi	r4,r4,7088
	*seg0 = (unsigned char) value % 10;
}


int main()
{ 
    1428:	dfc00215 	stw	ra,8(sp)
    142c:	dc400115 	stw	r17,4(sp)
    1430:	dc000015 	stw	r16,0(sp)
  alt_putstr("Welcome to the Alarm Clock\n");
    1434:	0001a140 	call	1a14 <alt_putstr>

  init_values();
    1438:	00013880 	call	1388 <init_values>
	alt_printf("Boton set clock\n");
}

static void buttons_init(void){
	//Up button:
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTN_UP_BASE, 0xf);
    143c:	044003c4 	movi	r17,15
    1440:	00902204 	movi	r2,16520
    1444:	14400035 	stwio	r17,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_UP_BASE, 0x0);
    1448:	0021883a 	mov	r16,zero
    144c:	00902304 	movi	r2,16524
    1450:	14000035 	stwio	r16,0(r2)
	alt_irq_register(BTN_UP_IRQ, BTN_UP_BASE, btn_up_respond);
    1454:	01800034 	movhi	r6,0
    1458:	31847804 	addi	r6,r6,4576
    145c:	01502004 	movi	r5,16512
    1460:	01000084 	movi	r4,2
    1464:	00016bc0 	call	16bc <alt_irq_register>

	//Down button:
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTN_DOWN_BASE, 0xf);
    1468:	00902604 	movi	r2,16536
    146c:	14400035 	stwio	r17,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_DOWN_BASE, 0x0);
    1470:	00902704 	movi	r2,16540
    1474:	14000035 	stwio	r16,0(r2)
	alt_irq_register(BTN_DOWN_IRQ, BTN_DOWN_BASE, btn_down_respond);
    1478:	01800034 	movhi	r6,0
    147c:	31847504 	addi	r6,r6,4564
    1480:	01502404 	movi	r5,16528
    1484:	010000c4 	movi	r4,3
    1488:	00016bc0 	call	16bc <alt_irq_register>

	//Set alarm button:
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTN_SET_ALARM_BASE, 0xf);
    148c:	00901e04 	movi	r2,16504
    1490:	14400035 	stwio	r17,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_SET_ALARM_BASE, 0x0);
    1494:	00901f04 	movi	r2,16508
    1498:	14000035 	stwio	r16,0(r2)
	alt_irq_register(BTN_SET_ALARM_IRQ, BTN_SET_ALARM_BASE, btn_set_alarm_respond);
    149c:	01800034 	movhi	r6,0
    14a0:	31847204 	addi	r6,r6,4552
    14a4:	01501c04 	movi	r5,16496
    14a8:	01000044 	movi	r4,1
    14ac:	00016bc0 	call	16bc <alt_irq_register>

	//Set clock button:
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTN_SET_CLOCK_BASE, 0xf);
    14b0:	00902a04 	movi	r2,16552
    14b4:	14400035 	stwio	r17,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_SET_CLOCK_BASE, 0x0);
    14b8:	00902b04 	movi	r2,16556
    14bc:	14000035 	stwio	r16,0(r2)
	alt_irq_register(BTN_SET_CLOCK_IRQ, BTN_SET_CLOCK_BASE, btn_set_clock_respond);
    14c0:	01800034 	movhi	r6,0
    14c4:	31846f04 	addi	r6,r6,4540
    14c8:	01502804 	movi	r5,16544
    14cc:	01000104 	movi	r4,4
    14d0:	00016bc0 	call	16bc <alt_irq_register>
/**
 * Timer init
 */
static void timer_init(void){
	//Start the values for the timer interrupt.
	IOWR_ALTERA_AVALON_TIMER_CONTROL(timer_base_ptr, ALTERA_AVALON_TIMER_CONTROL_ITO_MSK
    14d4:	d0a00017 	ldw	r2,-32768(gp)
    14d8:	01000144 	movi	r4,5
    14dc:	11000135 	stwio	r4,4(r2)
	        | ALTERA_AVALON_TIMER_CONTROL_START_MSK);
	//Init the handler for the timer interrupt.
	alt_irq_register(TIMER_IRQ, TIMER_BASE /*timer_base_ptr*/, respond);
    14e0:	01800034 	movhi	r6,0
    14e4:	3184b004 	addi	r6,r6,4800
    14e8:	01503004 	movi	r5,16576
    14ec:	00016bc0 	call	16bc <alt_irq_register>
	  display_hour();

  }*/

  return 0;
}
    14f0:	0005883a 	mov	r2,zero
    14f4:	dfc00217 	ldw	ra,8(sp)
    14f8:	dc400117 	ldw	r17,4(sp)
    14fc:	dc000017 	ldw	r16,0(sp)
    1500:	dec00304 	addi	sp,sp,12
    1504:	f800283a 	ret

00001508 <__divsi3>:
    1508:	20001b16 	blt	r4,zero,1578 <__divsi3+0x70>
    150c:	000f883a 	mov	r7,zero
    1510:	28001616 	blt	r5,zero,156c <__divsi3+0x64>
    1514:	200d883a 	mov	r6,r4
    1518:	29001a2e 	bgeu	r5,r4,1584 <__divsi3+0x7c>
    151c:	00800804 	movi	r2,32
    1520:	00c00044 	movi	r3,1
    1524:	00000106 	br	152c <__divsi3+0x24>
    1528:	10000d26 	beq	r2,zero,1560 <__divsi3+0x58>
    152c:	294b883a 	add	r5,r5,r5
    1530:	10bfffc4 	addi	r2,r2,-1
    1534:	18c7883a 	add	r3,r3,r3
    1538:	293ffb36 	bltu	r5,r4,1528 <_gp+0xffff795c>
    153c:	0005883a 	mov	r2,zero
    1540:	18000726 	beq	r3,zero,1560 <__divsi3+0x58>
    1544:	0005883a 	mov	r2,zero
    1548:	31400236 	bltu	r6,r5,1554 <__divsi3+0x4c>
    154c:	314dc83a 	sub	r6,r6,r5
    1550:	10c4b03a 	or	r2,r2,r3
    1554:	1806d07a 	srli	r3,r3,1
    1558:	280ad07a 	srli	r5,r5,1
    155c:	183ffa1e 	bne	r3,zero,1548 <_gp+0xffff797c>
    1560:	38000126 	beq	r7,zero,1568 <__divsi3+0x60>
    1564:	0085c83a 	sub	r2,zero,r2
    1568:	f800283a 	ret
    156c:	014bc83a 	sub	r5,zero,r5
    1570:	39c0005c 	xori	r7,r7,1
    1574:	003fe706 	br	1514 <_gp+0xffff7948>
    1578:	0109c83a 	sub	r4,zero,r4
    157c:	01c00044 	movi	r7,1
    1580:	003fe306 	br	1510 <_gp+0xffff7944>
    1584:	00c00044 	movi	r3,1
    1588:	003fee06 	br	1544 <_gp+0xffff7978>

0000158c <__modsi3>:
    158c:	20001716 	blt	r4,zero,15ec <__modsi3+0x60>
    1590:	000f883a 	mov	r7,zero
    1594:	2005883a 	mov	r2,r4
    1598:	28001216 	blt	r5,zero,15e4 <__modsi3+0x58>
    159c:	2900162e 	bgeu	r5,r4,15f8 <__modsi3+0x6c>
    15a0:	01800804 	movi	r6,32
    15a4:	00c00044 	movi	r3,1
    15a8:	00000106 	br	15b0 <__modsi3+0x24>
    15ac:	30000a26 	beq	r6,zero,15d8 <__modsi3+0x4c>
    15b0:	294b883a 	add	r5,r5,r5
    15b4:	31bfffc4 	addi	r6,r6,-1
    15b8:	18c7883a 	add	r3,r3,r3
    15bc:	293ffb36 	bltu	r5,r4,15ac <_gp+0xffff79e0>
    15c0:	18000526 	beq	r3,zero,15d8 <__modsi3+0x4c>
    15c4:	1806d07a 	srli	r3,r3,1
    15c8:	11400136 	bltu	r2,r5,15d0 <__modsi3+0x44>
    15cc:	1145c83a 	sub	r2,r2,r5
    15d0:	280ad07a 	srli	r5,r5,1
    15d4:	183ffb1e 	bne	r3,zero,15c4 <_gp+0xffff79f8>
    15d8:	38000126 	beq	r7,zero,15e0 <__modsi3+0x54>
    15dc:	0085c83a 	sub	r2,zero,r2
    15e0:	f800283a 	ret
    15e4:	014bc83a 	sub	r5,zero,r5
    15e8:	003fec06 	br	159c <_gp+0xffff79d0>
    15ec:	0109c83a 	sub	r4,zero,r4
    15f0:	01c00044 	movi	r7,1
    15f4:	003fe706 	br	1594 <_gp+0xffff79c8>
    15f8:	00c00044 	movi	r3,1
    15fc:	003ff106 	br	15c4 <_gp+0xffff79f8>

00001600 <__udivsi3>:
    1600:	200d883a 	mov	r6,r4
    1604:	2900152e 	bgeu	r5,r4,165c <__udivsi3+0x5c>
    1608:	28001416 	blt	r5,zero,165c <__udivsi3+0x5c>
    160c:	00800804 	movi	r2,32
    1610:	00c00044 	movi	r3,1
    1614:	00000206 	br	1620 <__udivsi3+0x20>
    1618:	10000e26 	beq	r2,zero,1654 <__udivsi3+0x54>
    161c:	28000516 	blt	r5,zero,1634 <__udivsi3+0x34>
    1620:	294b883a 	add	r5,r5,r5
    1624:	10bfffc4 	addi	r2,r2,-1
    1628:	18c7883a 	add	r3,r3,r3
    162c:	293ffa36 	bltu	r5,r4,1618 <_gp+0xffff7a4c>
    1630:	18000826 	beq	r3,zero,1654 <__udivsi3+0x54>
    1634:	0005883a 	mov	r2,zero
    1638:	31400236 	bltu	r6,r5,1644 <__udivsi3+0x44>
    163c:	314dc83a 	sub	r6,r6,r5
    1640:	10c4b03a 	or	r2,r2,r3
    1644:	1806d07a 	srli	r3,r3,1
    1648:	280ad07a 	srli	r5,r5,1
    164c:	183ffa1e 	bne	r3,zero,1638 <_gp+0xffff7a6c>
    1650:	f800283a 	ret
    1654:	0005883a 	mov	r2,zero
    1658:	f800283a 	ret
    165c:	00c00044 	movi	r3,1
    1660:	003ff406 	br	1634 <_gp+0xffff7a68>

00001664 <__umodsi3>:
    1664:	2005883a 	mov	r2,r4
    1668:	2900122e 	bgeu	r5,r4,16b4 <__umodsi3+0x50>
    166c:	28001116 	blt	r5,zero,16b4 <__umodsi3+0x50>
    1670:	01800804 	movi	r6,32
    1674:	00c00044 	movi	r3,1
    1678:	00000206 	br	1684 <__umodsi3+0x20>
    167c:	30000c26 	beq	r6,zero,16b0 <__umodsi3+0x4c>
    1680:	28000516 	blt	r5,zero,1698 <__umodsi3+0x34>
    1684:	294b883a 	add	r5,r5,r5
    1688:	31bfffc4 	addi	r6,r6,-1
    168c:	18c7883a 	add	r3,r3,r3
    1690:	293ffa36 	bltu	r5,r4,167c <_gp+0xffff7ab0>
    1694:	18000626 	beq	r3,zero,16b0 <__umodsi3+0x4c>
    1698:	1806d07a 	srli	r3,r3,1
    169c:	11400136 	bltu	r2,r5,16a4 <__umodsi3+0x40>
    16a0:	1145c83a 	sub	r2,r2,r5
    16a4:	280ad07a 	srli	r5,r5,1
    16a8:	183ffb1e 	bne	r3,zero,1698 <_gp+0xffff7acc>
    16ac:	f800283a 	ret
    16b0:	f800283a 	ret
    16b4:	00c00044 	movi	r3,1
    16b8:	003ff706 	br	1698 <_gp+0xffff7acc>

000016bc <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    16bc:	008007c4 	movi	r2,31
    16c0:	11002136 	bltu	r2,r4,1748 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    16c4:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    16c8:	00ffff84 	movi	r3,-2
    16cc:	38c4703a 	and	r2,r7,r3
    16d0:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    16d4:	200490fa 	slli	r2,r4,3
    16d8:	02000034 	movhi	r8,0
    16dc:	42071c04 	addi	r8,r8,7280
    16e0:	4085883a 	add	r2,r8,r2
    16e4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    16e8:	11400115 	stw	r5,4(r2)
    16ec:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    16f0:	30000726 	beq	r6,zero,1710 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    16f4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    16f8:	28c6703a 	and	r3,r5,r3
    16fc:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    1700:	d0e02217 	ldw	r3,-32632(gp)
    1704:	1104983a 	sll	r2,r2,r4
    1708:	10c4b03a 	or	r2,r2,r3
    170c:	00000706 	br	172c <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1710:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1714:	28c6703a 	and	r3,r5,r3
    1718:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    171c:	1104983a 	sll	r2,r2,r4
    1720:	d0e02217 	ldw	r3,-32632(gp)
    1724:	0084303a 	nor	r2,zero,r2
    1728:	10c4703a 	and	r2,r2,r3
    172c:	d0a02215 	stw	r2,-32632(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1730:	d0a02217 	ldw	r2,-32632(gp)
    1734:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1738:	2801703a 	wrctl	status,r5
    173c:	3801703a 	wrctl	status,r7
    1740:	0005883a 	mov	r2,zero
    1744:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
    1748:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
    174c:	f800283a 	ret

00001750 <alt_load>:
    1750:	deffff04 	addi	sp,sp,-4
    1754:	01000034 	movhi	r4,0
    1758:	01400034 	movhi	r5,0
    175c:	dfc00015 	stw	ra,0(sp)
    1760:	2106f304 	addi	r4,r4,7116
    1764:	29470304 	addi	r5,r5,7180
    1768:	2140061e 	bne	r4,r5,1784 <alt_load+0x34>
    176c:	01000034 	movhi	r4,0
    1770:	01400034 	movhi	r5,0
    1774:	21040804 	addi	r4,r4,4128
    1778:	29440804 	addi	r5,r5,4128
    177c:	2140121e 	bne	r4,r5,17c8 <alt_load+0x78>
    1780:	00000b06 	br	17b0 <alt_load+0x60>
    1784:	00c00034 	movhi	r3,0
    1788:	18c70304 	addi	r3,r3,7180
    178c:	1907c83a 	sub	r3,r3,r4
    1790:	0005883a 	mov	r2,zero
    1794:	10fff526 	beq	r2,r3,176c <_gp+0xffff7ba0>
    1798:	114f883a 	add	r7,r2,r5
    179c:	39c00017 	ldw	r7,0(r7)
    17a0:	110d883a 	add	r6,r2,r4
    17a4:	10800104 	addi	r2,r2,4
    17a8:	31c00015 	stw	r7,0(r6)
    17ac:	003ff906 	br	1794 <_gp+0xffff7bc8>
    17b0:	01000034 	movhi	r4,0
    17b4:	01400034 	movhi	r5,0
    17b8:	2106d604 	addi	r4,r4,7000
    17bc:	2946d604 	addi	r5,r5,7000
    17c0:	2140101e 	bne	r4,r5,1804 <alt_load+0xb4>
    17c4:	00000b06 	br	17f4 <alt_load+0xa4>
    17c8:	00c00034 	movhi	r3,0
    17cc:	18c46004 	addi	r3,r3,4480
    17d0:	1907c83a 	sub	r3,r3,r4
    17d4:	0005883a 	mov	r2,zero
    17d8:	10fff526 	beq	r2,r3,17b0 <_gp+0xffff7be4>
    17dc:	114f883a 	add	r7,r2,r5
    17e0:	39c00017 	ldw	r7,0(r7)
    17e4:	110d883a 	add	r6,r2,r4
    17e8:	10800104 	addi	r2,r2,4
    17ec:	31c00015 	stw	r7,0(r6)
    17f0:	003ff906 	br	17d8 <_gp+0xffff7c0c>
    17f4:	0001ab80 	call	1ab8 <alt_dcache_flush_all>
    17f8:	dfc00017 	ldw	ra,0(sp)
    17fc:	dec00104 	addi	sp,sp,4
    1800:	0001abc1 	jmpi	1abc <alt_icache_flush_all>
    1804:	00c00034 	movhi	r3,0
    1808:	18c6f304 	addi	r3,r3,7116
    180c:	1907c83a 	sub	r3,r3,r4
    1810:	0005883a 	mov	r2,zero
    1814:	18bff726 	beq	r3,r2,17f4 <_gp+0xffff7c28>
    1818:	114f883a 	add	r7,r2,r5
    181c:	39c00017 	ldw	r7,0(r7)
    1820:	110d883a 	add	r6,r2,r4
    1824:	10800104 	addi	r2,r2,4
    1828:	31c00015 	stw	r7,0(r6)
    182c:	003ff906 	br	1814 <_gp+0xffff7c48>

00001830 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1830:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1834:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1838:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    183c:	0001a4c0 	call	1a4c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1840:	0001a6c0 	call	1a6c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1844:	d1a02317 	ldw	r6,-32628(gp)
    1848:	d1602417 	ldw	r5,-32624(gp)
    184c:	d1202517 	ldw	r4,-32620(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1850:	dfc00017 	ldw	ra,0(sp)
    1854:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1858:	000141c1 	jmpi	141c <main>

0000185c <alt_printf>:
    185c:	defff204 	addi	sp,sp,-56
    1860:	2005883a 	mov	r2,r4
    1864:	dfc00a15 	stw	ra,40(sp)
    1868:	df000915 	stw	fp,36(sp)
    186c:	ddc00815 	stw	r23,32(sp)
    1870:	dd800715 	stw	r22,28(sp)
    1874:	dd400615 	stw	r21,24(sp)
    1878:	dd000515 	stw	r20,20(sp)
    187c:	dcc00415 	stw	r19,16(sp)
    1880:	dc800315 	stw	r18,12(sp)
    1884:	dc400215 	stw	r17,8(sp)
    1888:	dc000115 	stw	r16,4(sp)
    188c:	d9400b15 	stw	r5,44(sp)
    1890:	d9800c15 	stw	r6,48(sp)
    1894:	d9c00d15 	stw	r7,52(sp)
    1898:	04000944 	movi	r16,37
    189c:	dd400b04 	addi	r21,sp,44
    18a0:	048018c4 	movi	r18,99
    18a4:	04c01e04 	movi	r19,120
    18a8:	05001cc4 	movi	r20,115
    18ac:	11000007 	ldb	r4,0(r2)
    18b0:	20003a26 	beq	r4,zero,199c <alt_printf+0x140>
    18b4:	24000226 	beq	r4,r16,18c0 <alt_printf+0x64>
    18b8:	14400044 	addi	r17,r2,1
    18bc:	00001406 	br	1910 <alt_printf+0xb4>
    18c0:	14400084 	addi	r17,r2,2
    18c4:	10800047 	ldb	r2,1(r2)
    18c8:	10003426 	beq	r2,zero,199c <alt_printf+0x140>
    18cc:	1400021e 	bne	r2,r16,18d8 <alt_printf+0x7c>
    18d0:	8009883a 	mov	r4,r16
    18d4:	00000e06 	br	1910 <alt_printf+0xb4>
    18d8:	1480051e 	bne	r2,r18,18f0 <alt_printf+0x94>
    18dc:	a9000017 	ldw	r4,0(r21)
    18e0:	ad800104 	addi	r22,r21,4
    18e4:	b02b883a 	mov	r21,r22
    18e8:	00019cc0 	call	19cc <alt_putchar>
    18ec:	00002906 	br	1994 <alt_printf+0x138>
    18f0:	14c0201e 	bne	r2,r19,1974 <alt_printf+0x118>
    18f4:	adc00017 	ldw	r23,0(r21)
    18f8:	ad400104 	addi	r21,r21,4
    18fc:	b8000326 	beq	r23,zero,190c <alt_printf+0xb0>
    1900:	05800704 	movi	r22,28
    1904:	00c003c4 	movi	r3,15
    1908:	00000306 	br	1918 <alt_printf+0xbc>
    190c:	01000c04 	movi	r4,48
    1910:	00019cc0 	call	19cc <alt_putchar>
    1914:	00001f06 	br	1994 <alt_printf+0x138>
    1918:	1d84983a 	sll	r2,r3,r22
    191c:	15c4703a 	and	r2,r2,r23
    1920:	1000021e 	bne	r2,zero,192c <alt_printf+0xd0>
    1924:	b5bfff04 	addi	r22,r22,-4
    1928:	003ffb06 	br	1918 <_gp+0xffff7d4c>
    192c:	070003c4 	movi	fp,15
    1930:	00c00244 	movi	r3,9
    1934:	b0001716 	blt	r22,zero,1994 <alt_printf+0x138>
    1938:	e588983a 	sll	r4,fp,r22
    193c:	25c8703a 	and	r4,r4,r23
    1940:	2588d83a 	srl	r4,r4,r22
    1944:	19000236 	bltu	r3,r4,1950 <alt_printf+0xf4>
    1948:	21000c04 	addi	r4,r4,48
    194c:	00000106 	br	1954 <alt_printf+0xf8>
    1950:	210015c4 	addi	r4,r4,87
    1954:	21003fcc 	andi	r4,r4,255
    1958:	2100201c 	xori	r4,r4,128
    195c:	213fe004 	addi	r4,r4,-128
    1960:	d8c00015 	stw	r3,0(sp)
    1964:	00019cc0 	call	19cc <alt_putchar>
    1968:	b5bfff04 	addi	r22,r22,-4
    196c:	d8c00017 	ldw	r3,0(sp)
    1970:	003ff006 	br	1934 <_gp+0xffff7d68>
    1974:	1500071e 	bne	r2,r20,1994 <alt_printf+0x138>
    1978:	ad800017 	ldw	r22,0(r21)
    197c:	ad400104 	addi	r21,r21,4
    1980:	b1000007 	ldb	r4,0(r22)
    1984:	20000326 	beq	r4,zero,1994 <alt_printf+0x138>
    1988:	b5800044 	addi	r22,r22,1
    198c:	00019cc0 	call	19cc <alt_putchar>
    1990:	003ffb06 	br	1980 <_gp+0xffff7db4>
    1994:	8805883a 	mov	r2,r17
    1998:	003fc406 	br	18ac <_gp+0xffff7ce0>
    199c:	dfc00a17 	ldw	ra,40(sp)
    19a0:	df000917 	ldw	fp,36(sp)
    19a4:	ddc00817 	ldw	r23,32(sp)
    19a8:	dd800717 	ldw	r22,28(sp)
    19ac:	dd400617 	ldw	r21,24(sp)
    19b0:	dd000517 	ldw	r20,20(sp)
    19b4:	dcc00417 	ldw	r19,16(sp)
    19b8:	dc800317 	ldw	r18,12(sp)
    19bc:	dc400217 	ldw	r17,8(sp)
    19c0:	dc000117 	ldw	r16,4(sp)
    19c4:	dec00e04 	addi	sp,sp,56
    19c8:	f800283a 	ret

000019cc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    19cc:	defffd04 	addi	sp,sp,-12
    19d0:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    19d4:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    19d8:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    19dc:	01000034 	movhi	r4,0
    19e0:	000f883a 	mov	r7,zero
    19e4:	01800044 	movi	r6,1
    19e8:	d80b883a 	mov	r5,sp
    19ec:	21070204 	addi	r4,r4,7176
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    19f0:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    19f4:	0001a840 	call	1a84 <altera_avalon_jtag_uart_write>
    19f8:	00ffffc4 	movi	r3,-1
    19fc:	10c00126 	beq	r2,r3,1a04 <alt_putchar+0x38>
        return -1;
    }
    return c;
    1a00:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    1a04:	dfc00217 	ldw	ra,8(sp)
    1a08:	dc000117 	ldw	r16,4(sp)
    1a0c:	dec00304 	addi	sp,sp,12
    1a10:	f800283a 	ret

00001a14 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    1a14:	defffe04 	addi	sp,sp,-8
    1a18:	dc000015 	stw	r16,0(sp)
    1a1c:	dfc00115 	stw	ra,4(sp)
    1a20:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1a24:	0001b3c0 	call	1b3c <strlen>
    1a28:	01000034 	movhi	r4,0
    1a2c:	000f883a 	mov	r7,zero
    1a30:	100d883a 	mov	r6,r2
    1a34:	800b883a 	mov	r5,r16
    1a38:	21070204 	addi	r4,r4,7176
#else
    return fputs(str, stdout);
#endif
#endif
}
    1a3c:	dfc00117 	ldw	ra,4(sp)
    1a40:	dc000017 	ldw	r16,0(sp)
    1a44:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1a48:	0001a841 	jmpi	1a84 <altera_avalon_jtag_uart_write>

00001a4c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1a4c:	deffff04 	addi	sp,sp,-4
    1a50:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
    1a54:	0001ac00 	call	1ac0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1a58:	00800044 	movi	r2,1
    1a5c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1a60:	dfc00017 	ldw	ra,0(sp)
    1a64:	dec00104 	addi	sp,sp,4
    1a68:	f800283a 	ret

00001a6c <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
    1a6c:	00903004 	movi	r2,16576
    1a70:	d0a02715 	stw	r2,-32612(gp)
    1a74:	0080bef4 	movhi	r2,763
    1a78:	10bc2004 	addi	r2,r2,-3968
    1a7c:	d0a02615 	stw	r2,-32616(gp)
    1a80:	f800283a 	ret

00001a84 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1a84:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1a88:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1a8c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1a90:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1a94:	2980072e 	bgeu	r5,r6,1ab4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1a98:	38c00037 	ldwio	r3,0(r7)
    1a9c:	18ffffec 	andhi	r3,r3,65535
    1aa0:	183ffc26 	beq	r3,zero,1a94 <_gp+0xffff7ec8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1aa4:	28c00007 	ldb	r3,0(r5)
    1aa8:	20c00035 	stwio	r3,0(r4)
    1aac:	29400044 	addi	r5,r5,1
    1ab0:	003ff806 	br	1a94 <_gp+0xffff7ec8>

  return count;
}
    1ab4:	f800283a 	ret

00001ab8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1ab8:	f800283a 	ret

00001abc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1abc:	f800283a 	ret

00001ac0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1ac0:	000170fa 	wrctl	ienable,zero
    1ac4:	f800283a 	ret

00001ac8 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    1ac8:	213ffe84 	addi	r4,r4,-6
    1acc:	008003c4 	movi	r2,15
    1ad0:	11001636 	bltu	r2,r4,1b2c <alt_exception_cause_generated_bad_addr+0x64>
    1ad4:	200890ba 	slli	r4,r4,2
    1ad8:	00800034 	movhi	r2,0
    1adc:	1086bb04 	addi	r2,r2,6892
    1ae0:	2089883a 	add	r4,r4,r2
    1ae4:	20800017 	ldw	r2,0(r4)
    1ae8:	1000683a 	jmp	r2
    1aec:	00001b34 	movhi	zero,108
    1af0:	00001b34 	movhi	zero,108
    1af4:	00001b2c 	andhi	zero,zero,108
    1af8:	00001b2c 	andhi	zero,zero,108
    1afc:	00001b2c 	andhi	zero,zero,108
    1b00:	00001b34 	movhi	zero,108
    1b04:	00001b2c 	andhi	zero,zero,108
    1b08:	00001b2c 	andhi	zero,zero,108
    1b0c:	00001b34 	movhi	zero,108
    1b10:	00001b34 	movhi	zero,108
    1b14:	00001b2c 	andhi	zero,zero,108
    1b18:	00001b34 	movhi	zero,108
    1b1c:	00001b2c 	andhi	zero,zero,108
    1b20:	00001b2c 	andhi	zero,zero,108
    1b24:	00001b2c 	andhi	zero,zero,108
    1b28:	00001b34 	movhi	zero,108
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    1b2c:	0005883a 	mov	r2,zero
    1b30:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    1b34:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    1b38:	f800283a 	ret

00001b3c <strlen>:
    1b3c:	2005883a 	mov	r2,r4
    1b40:	10c00007 	ldb	r3,0(r2)
    1b44:	18000226 	beq	r3,zero,1b50 <strlen+0x14>
    1b48:	10800044 	addi	r2,r2,1
    1b4c:	003ffc06 	br	1b40 <_gp+0xffff7f74>
    1b50:	1105c83a 	sub	r2,r2,r4
    1b54:	f800283a 	ret
