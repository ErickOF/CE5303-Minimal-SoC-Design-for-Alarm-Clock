
alarm_clock.elf:     file format elf32-littlenios2
alarm_clock.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001180

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000a88 memsz 0x00000a88 flags r-x
    LOAD off    0x00001aa8 vaddr 0x00001aa8 paddr 0x00001ae8 align 2**12
         filesz 0x00000040 memsz 0x00000040 flags rw-
    LOAD off    0x00001b28 vaddr 0x00001b28 paddr 0x00001b28 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000008f4  00001180  00001180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  00001a74  00001a74  00001a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000040  00001aa8  00001ae8  00001aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00001b28  00001b28  00001b28  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00001c4c  00001c4c  00001ae8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002d0  00000000  00000000  00001b10  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001e02  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f1e  00000000  00000000  00003be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000ef6  00000000  00000000  00004b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000037c  00000000  00000000  000059f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f72  00000000  00000000  00005d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000afb  00000000  00000000  00006ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000077e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001e8  00000000  00000000  000077f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00008c79  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00008c7c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00008c7f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00008c80  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00008c81  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00008c85  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00008c89  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00008c8d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000006e  00000000  00000000  00008c93  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00077c1e  00000000  00000000  00008d01  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001180 l    d  .text	00000000 .text
00001a74 l    d  .rodata	00000000 .rodata
00001aa8 l    d  .rwdata	00000000 .rwdata
00001b28 l    d  .bss	00000000 .bss
00001c4c l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_clock_bsp//obj/HAL/src/crt0.o
000011b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00001290 l     F .text	000000c8 respond
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00001b48 g     O .bss	00000004 alt_instruction_exception_handler
0000174c g     F .text	0000002c alt_main
00001b4c g     O .bss	00000100 alt_irq
00001ae8 g       *ABS*	00000000 __flash_rwdata_start
00001ae4 g     O .rwdata	00000004 UART
00001358 g     F .text	0000003c init_values
00001b40 g     O .bss	00000004 altera_avalon_timer_ts_freq
00001ac0 g     O .rwdata	00000004 set_clock_ptr
00001930 g     F .text	00000038 alt_putstr
000019dc g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001ad8 g     O .rwdata	00000004 h0_ptr
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001ad4 g     O .rwdata	00000004 m1_ptr
00001b38 g     O .bss	00000004 alt_argv
00009aa8 g       *ABS*	00000000 _gp
000019e4 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00001ac8 g     O .rwdata	00000004 s0_ptr
00001ab8 g     O .rwdata	00000004 down_ptr
0000151c g     F .text	00000064 .hidden __udivsi3
00001ad0 g     O .rwdata	00000004 m0_ptr
000015d8 g     F .text	00000094 alt_irq_register
00001c4c g       *ABS*	00000000 __bss_end
00001aac g     O .rwdata	00000006 alarm
00001b30 g     O .bss	00000004 alt_irq_active
000010fc g     F .exceptions	00000060 alt_irq_handler
000019d4 g     F .text	00000004 alt_dcache_flush_all
00001acc g     O .rwdata	00000004 s1_ptr
00001ae8 g       *ABS*	00000000 __ram_rwdata_end
00001aa8 g       *ABS*	00000000 __ram_rodata_end
00001580 g     F .text	00000058 .hidden __umodsi3
00001c4c g       *ABS*	00000000 end
0000115c g     F .exceptions	00000024 alt_instruction_exception_entry
00002000 g       *ABS*	00000000 __alt_stack_pointer
000019a0 g     F .text	00000034 altera_avalon_jtag_uart_write
00001778 g     F .text	00000170 alt_printf
00001abc g     O .rwdata	00000004 up_ptr
00001180 g     F .text	0000003c _start
00001988 g     F .text	00000018 alt_sys_init
00001adc g     O .rwdata	00000004 h1_ptr
00001aa8 g       *ABS*	00000000 __ram_rwdata_start
00001a74 g       *ABS*	00000000 __ram_rodata_start
00001b2a g     O .bss	00000006 hour
00001c4c g       *ABS*	00000000 __alt_stack_base
000011bc g     F .text	00000060 add_second
00001b28 g       *ABS*	00000000 __bss_start
000013ec g     F .text	00000038 main
00001000 g       *ABS*	00000000 __alt_mem_RAM
00001b34 g     O .bss	00000004 alt_envp
00001424 g     F .text	00000084 .hidden __divsi3
00001ac4 g     O .rwdata	00000004 set_alarm_ptr
00001394 g     F .text	00000058 set_value
00001a74 g       *ABS*	00000000 __flash_rodata_start
00001aa8 g     O .rwdata	00000004 timer_base_ptr
00001968 g     F .text	00000020 alt_irq_init
00001ab4 g     O .rwdata	00000004 alarm_ptr
00001b3c g     O .bss	00000004 alt_argc
00001b44 g     O .bss	00000004 altera_avalon_timer_ts_base
00001020 g       .exceptions	00000000 alt_irq_entry
0000121c g     F .text	00000074 display_hour
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001ae8 g       *ABS*	00000000 _edata
00001c4c g       *ABS*	00000000 _end
00001180 g       *ABS*	00000000 __ram_exceptions_end
000014a8 g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
00001020 g     F .exceptions	00000000 alt_exception
00001b28 g     O .bss	00000002 is_activated
0000100c g       .entry	00000000 _exit
00001a58 g     F .text	0000001c strlen
000018e8 g     F .text	00000048 alt_putchar
000019d8 g     F .text	00000004 alt_icache_flush_all
00001ae0 g     O .rwdata	00000004 alt_priority_mask
0000166c g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08446014 	ori	at,at,4480
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .exceptions:

00001020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    1020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    1024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    1028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    102c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    1030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    1034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    1038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    103c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    1040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    1044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    1048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    104c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    1050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    1054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    1058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    105c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    1060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    1064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    1068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    106c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    1070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    1074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    1078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    107c:	10000326 	beq	r2,zero,108c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    1080:	20000226 	beq	r4,zero,108c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    1084:	00010fc0 	call	10fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    1088:	00000706 	br	10a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    108c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    1090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    1094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    1098:	000115c0 	call	115c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    109c:	1000021e 	bne	r2,zero,10a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    10a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    10a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    10a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    10ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    10b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    10b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    10b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    10bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    10c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    10c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    10c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    10cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    10d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    10d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    10d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    10dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    10e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    10e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    10e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    10ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    10f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    10f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    10f8:	ef80083a 	eret

000010fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    10fc:	defffe04 	addi	sp,sp,-8
    1100:	dfc00115 	stw	ra,4(sp)
    1104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    1108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    110c:	04000034 	movhi	r16,0
    1110:	8406d304 	addi	r16,r16,6988

  active = alt_irq_pending ();

  do
  {
    i = 0;
    1114:	0005883a 	mov	r2,zero
    mask = 1;
    1118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    111c:	20ca703a 	and	r5,r4,r3
    1120:	28000b26 	beq	r5,zero,1150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    1124:	100490fa 	slli	r2,r2,3
    1128:	8085883a 	add	r2,r16,r2
    112c:	10c00017 	ldw	r3,0(r2)
    1130:	11000117 	ldw	r4,4(r2)
    1134:	183ee83a 	callr	r3
    1138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    113c:	203ff51e 	bne	r4,zero,1114 <_gp+0xffff766c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	dc000017 	ldw	r16,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    1150:	18c7883a 	add	r3,r3,r3
      i++;
    1154:	10800044 	addi	r2,r2,1

    } while (1);
    1158:	003ff006 	br	111c <_gp+0xffff7674>

0000115c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    115c:	d0a02817 	ldw	r2,-32608(gp)
    1160:	10000426 	beq	r2,zero,1174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    1164:	200b883a 	mov	r5,r4
    1168:	000d883a 	mov	r6,zero
    116c:	013fffc4 	movi	r4,-1
    1170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    1174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    1178:	0005883a 	mov	r2,zero
    117c:	f800283a 	ret

Disassembly of section .text:

00001180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1184:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    118c:	d6a6aa14 	ori	gp,gp,39592
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1194:	1086ca14 	ori	r2,r2,6952

    movhi r3, %hi(__bss_end)
    1198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    119c:	18c71314 	ori	r3,r3,7244

    beq r2, r3, 1f
    11a0:	10c00326 	beq	r2,r3,11b0 <_start+0x30>

0:
    stw zero, (r2)
    11a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    11a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    11ac:	10fffd36 	bltu	r2,r3,11a4 <_gp+0xffff76fc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    11b0:	000166c0 	call	166c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    11b4:	000174c0 	call	174c <alt_main>

000011b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    11b8:	003fff06 	br	11b8 <_gp+0xffff7710>

000011bc <add_second>:
 * Update the value of a specific display
 */
void add_second()
{
	// Add a second
	hour[0]++;
    11bc:	d0a0208b 	ldhu	r2,-32638(gp)

	if (hour[0] == 60)
    11c0:	01000f04 	movi	r4,60
 * Update the value of a specific display
 */
void add_second()
{
	// Add a second
	hour[0]++;
    11c4:	10800044 	addi	r2,r2,1

	if (hour[0] == 60)
    11c8:	10ffffcc 	andi	r3,r2,65535
    11cc:	19000226 	beq	r3,r4,11d8 <add_second+0x1c>
 * Update the value of a specific display
 */
void add_second()
{
	// Add a second
	hour[0]++;
    11d0:	d0a0208d 	sth	r2,-32638(gp)
    11d4:	f800283a 	ret

	if (hour[0] == 60)
	{
		hour[0] = 0;
		hour[1]++;
    11d8:	d0a0210b 	ldhu	r2,-32636(gp)
	// Add a second
	hour[0]++;

	if (hour[0] == 60)
	{
		hour[0] = 0;
    11dc:	d020208d 	sth	zero,-32638(gp)
		hour[1]++;
    11e0:	10800044 	addi	r2,r2,1

		if (hour[1] == 60)
    11e4:	113fffcc 	andi	r4,r2,65535
    11e8:	20c00226 	beq	r4,r3,11f4 <add_second+0x38>
	hour[0]++;

	if (hour[0] == 60)
	{
		hour[0] = 0;
		hour[1]++;
    11ec:	d0a0210d 	sth	r2,-32636(gp)
    11f0:	f800283a 	ret

		if (hour[1] == 60)
		{
			hour[1] = 0;
			hour[2]++;
    11f4:	d0a0218b 	ldhu	r2,-32634(gp)
		hour[0] = 0;
		hour[1]++;

		if (hour[1] == 60)
		{
			hour[1] = 0;
    11f8:	d020210d 	sth	zero,-32636(gp)
			hour[2]++;

			if (hour[2] == 24)
    11fc:	00c00604 	movi	r3,24
		hour[1]++;

		if (hour[1] == 60)
		{
			hour[1] = 0;
			hour[2]++;
    1200:	10800044 	addi	r2,r2,1

			if (hour[2] == 24)
    1204:	113fffcc 	andi	r4,r2,65535
    1208:	20c00226 	beq	r4,r3,1214 <add_second+0x58>
		hour[1]++;

		if (hour[1] == 60)
		{
			hour[1] = 0;
			hour[2]++;
    120c:	d0a0218d 	sth	r2,-32634(gp)
    1210:	f800283a 	ret

			if (hour[2] == 24)
			{
				hour[2] = 0;
    1214:	d020218d 	sth	zero,-32634(gp)
    1218:	f800283a 	ret

0000121c <display_hour>:
	}
}

void display_hour()
{
	alt_printf("%x %x : %x %x : %x %x\n", *h1_ptr, *h0_ptr, *m1_ptr, *m0_ptr,
    121c:	d0a00d17 	ldw	r2,-32716(gp)
		}
	}
}

void display_hour()
{
    1220:	defffc04 	addi	sp,sp,-16
    1224:	dfc00315 	stw	ra,12(sp)
	alt_printf("%x %x : %x %x : %x %x\n", *h1_ptr, *h0_ptr, *m1_ptr, *m0_ptr,
    1228:	11400003 	ldbu	r5,0(r2)
    122c:	d0a00c17 	ldw	r2,-32720(gp)
									   *s1_ptr, *s0_ptr);
    1230:	d0e00917 	ldw	r3,-32732(gp)
    1234:	d1200817 	ldw	r4,-32736(gp)
	}
}

void display_hour()
{
	alt_printf("%x %x : %x %x : %x %x\n", *h1_ptr, *h0_ptr, *m1_ptr, *m0_ptr,
    1238:	11800003 	ldbu	r6,0(r2)
    123c:	d0a00b17 	ldw	r2,-32724(gp)
    1240:	29403fcc 	andi	r5,r5,255
    1244:	31803fcc 	andi	r6,r6,255
    1248:	11c00003 	ldbu	r7,0(r2)
    124c:	d0a00a17 	ldw	r2,-32728(gp)
    1250:	39c03fcc 	andi	r7,r7,255
    1254:	10800003 	ldbu	r2,0(r2)
									   *s1_ptr, *s0_ptr);
    1258:	18c00003 	ldbu	r3,0(r3)
    125c:	21000003 	ldbu	r4,0(r4)
	}
}

void display_hour()
{
	alt_printf("%x %x : %x %x : %x %x\n", *h1_ptr, *h0_ptr, *m1_ptr, *m0_ptr,
    1260:	10803fcc 	andi	r2,r2,255
    1264:	18c03fcc 	andi	r3,r3,255
    1268:	21003fcc 	andi	r4,r4,255
    126c:	d9000215 	stw	r4,8(sp)
    1270:	01000034 	movhi	r4,0
    1274:	d8c00115 	stw	r3,4(sp)
    1278:	d8800015 	stw	r2,0(sp)
    127c:	21069d04 	addi	r4,r4,6772
    1280:	00017780 	call	1778 <alt_printf>
									   *s1_ptr, *s0_ptr);
}
    1284:	dfc00317 	ldw	ra,12(sp)
    1288:	dec00404 	addi	sp,sp,16
    128c:	f800283a 	ret

00001290 <respond>:
/**
 * Handler for timer interrupt.
 */
static void respond(void* context){
	//*timer_base_ptr = 0;
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
    1290:	d0a00017 	ldw	r2,-32768(gp)
volatile uchar *timer_base_ptr = (uchar *)TIMER_BASE;

/**
 * Handler for timer interrupt.
 */
static void respond(void* context){
    1294:	defffb04 	addi	sp,sp,-20
    1298:	dfc00415 	stw	ra,16(sp)
    129c:	dcc00315 	stw	r19,12(sp)
    12a0:	dc800215 	stw	r18,8(sp)
    12a4:	dc400115 	stw	r17,4(sp)
    12a8:	dc000015 	stw	r16,0(sp)
	//*timer_base_ptr = 0;
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
    12ac:	10000035 	stwio	zero,0(r2)
	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
    12b0:	d4202084 	addi	r16,gp,-32638
 * Handler for timer interrupt.
 */
static void respond(void* context){
	//*timer_base_ptr = 0;
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
	add_second();
    12b4:	00011bc0 	call	11bc <add_second>
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    12b8:	84400003 	ldbu	r17,0(r16)
static void respond(void* context){
	//*timer_base_ptr = 0;
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
    12bc:	d4e00917 	ldw	r19,-32732(gp)
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    12c0:	01400284 	movi	r5,10
    12c4:	8809883a 	mov	r4,r17
    12c8:	000151c0 	call	151c <__udivsi3>
static void respond(void* context){
	//*timer_base_ptr = 0;
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
    12cc:	d4a00817 	ldw	r18,-32736(gp)
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
    12d0:	8809883a 	mov	r4,r17
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    12d4:	98800005 	stb	r2,0(r19)
	*seg0 = (unsigned char) value % 10;
    12d8:	01400284 	movi	r5,10
    12dc:	00015800 	call	1580 <__umodsi3>
    12e0:	90800005 	stb	r2,0(r18)
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    12e4:	84400083 	ldbu	r17,2(r16)
	//*timer_base_ptr = 0;
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
    12e8:	d4e00b17 	ldw	r19,-32724(gp)
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    12ec:	01400284 	movi	r5,10
    12f0:	8809883a 	mov	r4,r17
    12f4:	000151c0 	call	151c <__udivsi3>
	//*timer_base_ptr = 0;
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
    12f8:	d4a00a17 	ldw	r18,-32728(gp)
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
    12fc:	8809883a 	mov	r4,r17
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    1300:	98800005 	stb	r2,0(r19)
	*seg0 = (unsigned char) value % 10;
    1304:	01400284 	movi	r5,10
    1308:	00015800 	call	1580 <__umodsi3>
    130c:	90800005 	stb	r2,0(r18)
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    1310:	84000103 	ldbu	r16,4(r16)
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
	set_value(hour[2], h1_ptr, h0_ptr);
    1314:	d4a00d17 	ldw	r18,-32716(gp)
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    1318:	01400284 	movi	r5,10
    131c:	8009883a 	mov	r4,r16
    1320:	000151c0 	call	151c <__udivsi3>
	IOWR_ALTERA_AVALON_TIMER_STATUS(timer_base_ptr, 0x0);
	add_second();

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
	set_value(hour[2], h1_ptr, h0_ptr);
    1324:	d4600c17 	ldw	r17,-32720(gp)
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
    1328:	01400284 	movi	r5,10
/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
	*seg1 = (unsigned char) value / 10;
    132c:	90800005 	stb	r2,0(r18)
	*seg0 = (unsigned char) value % 10;
    1330:	8009883a 	mov	r4,r16
    1334:	00015800 	call	1580 <__umodsi3>
    1338:	88800005 	stb	r2,0(r17)
	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
	set_value(hour[2], h1_ptr, h0_ptr);

	display_hour();
}
    133c:	dfc00417 	ldw	ra,16(sp)
    1340:	dcc00317 	ldw	r19,12(sp)
    1344:	dc800217 	ldw	r18,8(sp)
    1348:	dc400117 	ldw	r17,4(sp)
    134c:	dc000017 	ldw	r16,0(sp)
    1350:	dec00504 	addi	sp,sp,20

	set_value(hour[0], s1_ptr, s0_ptr);
	set_value(hour[1], m1_ptr, m0_ptr);
	set_value(hour[2], h1_ptr, h0_ptr);

	display_hour();
    1354:	000121c1 	jmpi	121c <display_hour>

00001358 <init_values>:
}

void init_values()
{
	// Init all pointer in zero
	*h1_ptr = 0;
    1358:	d0a00d17 	ldw	r2,-32716(gp)
    135c:	10000005 	stb	zero,0(r2)
	*h0_ptr = 0;
    1360:	d0a00c17 	ldw	r2,-32720(gp)
    1364:	10000005 	stb	zero,0(r2)
	*m1_ptr = 0;
    1368:	d0a00b17 	ldw	r2,-32724(gp)
    136c:	10000005 	stb	zero,0(r2)
	*m0_ptr = 0;
    1370:	d0a00a17 	ldw	r2,-32728(gp)
    1374:	10000005 	stb	zero,0(r2)
	*s1_ptr = 0;
    1378:	d0a00917 	ldw	r2,-32732(gp)
    137c:	10000005 	stb	zero,0(r2)
	*s0_ptr = 0;
    1380:	d0a00817 	ldw	r2,-32736(gp)
    1384:	10000005 	stb	zero,0(r2)

	// Alarm doesn't sound
	*alarm_ptr = 0;
    1388:	d0a00317 	ldw	r2,-32756(gp)
    138c:	10000005 	stb	zero,0(r2)
    1390:	f800283a 	ret

00001394 <set_value>:

/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
    1394:	defffc04 	addi	sp,sp,-16
    1398:	dc000015 	stw	r16,0(sp)
	*seg1 = (unsigned char) value / 10;
    139c:	24003fcc 	andi	r16,r4,255

/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
    13a0:	dc800215 	stw	r18,8(sp)
	*seg1 = (unsigned char) value / 10;
    13a4:	8009883a 	mov	r4,r16

/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
    13a8:	2825883a 	mov	r18,r5
	*seg1 = (unsigned char) value / 10;
    13ac:	01400284 	movi	r5,10

/**
 *
 */
void set_value(unsigned short value, volatile unsigned char* seg1, volatile unsigned char* seg0)
{
    13b0:	dfc00315 	stw	ra,12(sp)
    13b4:	dc400115 	stw	r17,4(sp)
    13b8:	3023883a 	mov	r17,r6
	*seg1 = (unsigned char) value / 10;
    13bc:	000151c0 	call	151c <__udivsi3>
    13c0:	90800005 	stb	r2,0(r18)
	*seg0 = (unsigned char) value % 10;
    13c4:	01400284 	movi	r5,10
    13c8:	8009883a 	mov	r4,r16
    13cc:	00015800 	call	1580 <__umodsi3>
    13d0:	88800005 	stb	r2,0(r17)
}
    13d4:	dfc00317 	ldw	ra,12(sp)
    13d8:	dc800217 	ldw	r18,8(sp)
    13dc:	dc400117 	ldw	r17,4(sp)
    13e0:	dc000017 	ldw	r16,0(sp)
    13e4:	dec00404 	addi	sp,sp,16
    13e8:	f800283a 	ret

000013ec <main>:

int main()
{ 
  alt_putstr("Welcome to the Alarm Clock\n");
    13ec:	01000034 	movhi	r4,0
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
}

int main()
{ 
    13f0:	deffff04 	addi	sp,sp,-4
  alt_putstr("Welcome to the Alarm Clock\n");
    13f4:	2106a304 	addi	r4,r4,6796
	*seg1 = (unsigned char) value / 10;
	*seg0 = (unsigned char) value % 10;
}

int main()
{ 
    13f8:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Welcome to the Alarm Clock\n");
    13fc:	00019300 	call	1930 <alt_putstr>

  init_values();
    1400:	00013580 	call	1358 <init_values>
/**
 * Timer init
 */
static void timer_init(void){
	//Start the values for the timer interrupt.
	IOWR_ALTERA_AVALON_TIMER_CONTROL(timer_base_ptr, ALTERA_AVALON_TIMER_CONTROL_ITO_MSK
    1404:	d0a00017 	ldw	r2,-32768(gp)
    1408:	01000144 	movi	r4,5
    140c:	11000135 	stwio	r4,4(r2)
	        | ALTERA_AVALON_TIMER_CONTROL_START_MSK);
	//Init the handler for the timer interrupt.
	alt_irq_register(TIMER_IRQ, TIMER_BASE /*timer_base_ptr*/, respond);
    1410:	01800034 	movhi	r6,0
    1414:	3184a404 	addi	r6,r6,4752
    1418:	01503004 	movi	r5,16576
    141c:	00015d80 	call	15d8 <alt_irq_register>
    1420:	003fff06 	br	1420 <_gp+0xffff7978>

00001424 <__divsi3>:
    1424:	20001b16 	blt	r4,zero,1494 <__divsi3+0x70>
    1428:	000f883a 	mov	r7,zero
    142c:	28001616 	blt	r5,zero,1488 <__divsi3+0x64>
    1430:	200d883a 	mov	r6,r4
    1434:	29001a2e 	bgeu	r5,r4,14a0 <__divsi3+0x7c>
    1438:	00800804 	movi	r2,32
    143c:	00c00044 	movi	r3,1
    1440:	00000106 	br	1448 <__divsi3+0x24>
    1444:	10000d26 	beq	r2,zero,147c <__divsi3+0x58>
    1448:	294b883a 	add	r5,r5,r5
    144c:	10bfffc4 	addi	r2,r2,-1
    1450:	18c7883a 	add	r3,r3,r3
    1454:	293ffb36 	bltu	r5,r4,1444 <_gp+0xffff799c>
    1458:	0005883a 	mov	r2,zero
    145c:	18000726 	beq	r3,zero,147c <__divsi3+0x58>
    1460:	0005883a 	mov	r2,zero
    1464:	31400236 	bltu	r6,r5,1470 <__divsi3+0x4c>
    1468:	314dc83a 	sub	r6,r6,r5
    146c:	10c4b03a 	or	r2,r2,r3
    1470:	1806d07a 	srli	r3,r3,1
    1474:	280ad07a 	srli	r5,r5,1
    1478:	183ffa1e 	bne	r3,zero,1464 <_gp+0xffff79bc>
    147c:	38000126 	beq	r7,zero,1484 <__divsi3+0x60>
    1480:	0085c83a 	sub	r2,zero,r2
    1484:	f800283a 	ret
    1488:	014bc83a 	sub	r5,zero,r5
    148c:	39c0005c 	xori	r7,r7,1
    1490:	003fe706 	br	1430 <_gp+0xffff7988>
    1494:	0109c83a 	sub	r4,zero,r4
    1498:	01c00044 	movi	r7,1
    149c:	003fe306 	br	142c <_gp+0xffff7984>
    14a0:	00c00044 	movi	r3,1
    14a4:	003fee06 	br	1460 <_gp+0xffff79b8>

000014a8 <__modsi3>:
    14a8:	20001716 	blt	r4,zero,1508 <__modsi3+0x60>
    14ac:	000f883a 	mov	r7,zero
    14b0:	2005883a 	mov	r2,r4
    14b4:	28001216 	blt	r5,zero,1500 <__modsi3+0x58>
    14b8:	2900162e 	bgeu	r5,r4,1514 <__modsi3+0x6c>
    14bc:	01800804 	movi	r6,32
    14c0:	00c00044 	movi	r3,1
    14c4:	00000106 	br	14cc <__modsi3+0x24>
    14c8:	30000a26 	beq	r6,zero,14f4 <__modsi3+0x4c>
    14cc:	294b883a 	add	r5,r5,r5
    14d0:	31bfffc4 	addi	r6,r6,-1
    14d4:	18c7883a 	add	r3,r3,r3
    14d8:	293ffb36 	bltu	r5,r4,14c8 <_gp+0xffff7a20>
    14dc:	18000526 	beq	r3,zero,14f4 <__modsi3+0x4c>
    14e0:	1806d07a 	srli	r3,r3,1
    14e4:	11400136 	bltu	r2,r5,14ec <__modsi3+0x44>
    14e8:	1145c83a 	sub	r2,r2,r5
    14ec:	280ad07a 	srli	r5,r5,1
    14f0:	183ffb1e 	bne	r3,zero,14e0 <_gp+0xffff7a38>
    14f4:	38000126 	beq	r7,zero,14fc <__modsi3+0x54>
    14f8:	0085c83a 	sub	r2,zero,r2
    14fc:	f800283a 	ret
    1500:	014bc83a 	sub	r5,zero,r5
    1504:	003fec06 	br	14b8 <_gp+0xffff7a10>
    1508:	0109c83a 	sub	r4,zero,r4
    150c:	01c00044 	movi	r7,1
    1510:	003fe706 	br	14b0 <_gp+0xffff7a08>
    1514:	00c00044 	movi	r3,1
    1518:	003ff106 	br	14e0 <_gp+0xffff7a38>

0000151c <__udivsi3>:
    151c:	200d883a 	mov	r6,r4
    1520:	2900152e 	bgeu	r5,r4,1578 <__udivsi3+0x5c>
    1524:	28001416 	blt	r5,zero,1578 <__udivsi3+0x5c>
    1528:	00800804 	movi	r2,32
    152c:	00c00044 	movi	r3,1
    1530:	00000206 	br	153c <__udivsi3+0x20>
    1534:	10000e26 	beq	r2,zero,1570 <__udivsi3+0x54>
    1538:	28000516 	blt	r5,zero,1550 <__udivsi3+0x34>
    153c:	294b883a 	add	r5,r5,r5
    1540:	10bfffc4 	addi	r2,r2,-1
    1544:	18c7883a 	add	r3,r3,r3
    1548:	293ffa36 	bltu	r5,r4,1534 <_gp+0xffff7a8c>
    154c:	18000826 	beq	r3,zero,1570 <__udivsi3+0x54>
    1550:	0005883a 	mov	r2,zero
    1554:	31400236 	bltu	r6,r5,1560 <__udivsi3+0x44>
    1558:	314dc83a 	sub	r6,r6,r5
    155c:	10c4b03a 	or	r2,r2,r3
    1560:	1806d07a 	srli	r3,r3,1
    1564:	280ad07a 	srli	r5,r5,1
    1568:	183ffa1e 	bne	r3,zero,1554 <_gp+0xffff7aac>
    156c:	f800283a 	ret
    1570:	0005883a 	mov	r2,zero
    1574:	f800283a 	ret
    1578:	00c00044 	movi	r3,1
    157c:	003ff406 	br	1550 <_gp+0xffff7aa8>

00001580 <__umodsi3>:
    1580:	2005883a 	mov	r2,r4
    1584:	2900122e 	bgeu	r5,r4,15d0 <__umodsi3+0x50>
    1588:	28001116 	blt	r5,zero,15d0 <__umodsi3+0x50>
    158c:	01800804 	movi	r6,32
    1590:	00c00044 	movi	r3,1
    1594:	00000206 	br	15a0 <__umodsi3+0x20>
    1598:	30000c26 	beq	r6,zero,15cc <__umodsi3+0x4c>
    159c:	28000516 	blt	r5,zero,15b4 <__umodsi3+0x34>
    15a0:	294b883a 	add	r5,r5,r5
    15a4:	31bfffc4 	addi	r6,r6,-1
    15a8:	18c7883a 	add	r3,r3,r3
    15ac:	293ffa36 	bltu	r5,r4,1598 <_gp+0xffff7af0>
    15b0:	18000626 	beq	r3,zero,15cc <__umodsi3+0x4c>
    15b4:	1806d07a 	srli	r3,r3,1
    15b8:	11400136 	bltu	r2,r5,15c0 <__umodsi3+0x40>
    15bc:	1145c83a 	sub	r2,r2,r5
    15c0:	280ad07a 	srli	r5,r5,1
    15c4:	183ffb1e 	bne	r3,zero,15b4 <_gp+0xffff7b0c>
    15c8:	f800283a 	ret
    15cc:	f800283a 	ret
    15d0:	00c00044 	movi	r3,1
    15d4:	003ff706 	br	15b4 <_gp+0xffff7b0c>

000015d8 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    15d8:	008007c4 	movi	r2,31
    15dc:	11002136 	bltu	r2,r4,1664 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    15e0:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    15e4:	00ffff84 	movi	r3,-2
    15e8:	38c4703a 	and	r2,r7,r3
    15ec:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    15f0:	200490fa 	slli	r2,r4,3
    15f4:	02000034 	movhi	r8,0
    15f8:	4206d304 	addi	r8,r8,6988
    15fc:	4085883a 	add	r2,r8,r2
    1600:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    1604:	11400115 	stw	r5,4(r2)
    1608:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    160c:	30000726 	beq	r6,zero,162c <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1610:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1614:	28c6703a 	and	r3,r5,r3
    1618:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    161c:	d0e02217 	ldw	r3,-32632(gp)
    1620:	1104983a 	sll	r2,r2,r4
    1624:	10c4b03a 	or	r2,r2,r3
    1628:	00000706 	br	1648 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    162c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1630:	28c6703a 	and	r3,r5,r3
    1634:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    1638:	1104983a 	sll	r2,r2,r4
    163c:	d0e02217 	ldw	r3,-32632(gp)
    1640:	0084303a 	nor	r2,zero,r2
    1644:	10c4703a 	and	r2,r2,r3
    1648:	d0a02215 	stw	r2,-32632(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    164c:	d0a02217 	ldw	r2,-32632(gp)
    1650:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1654:	2801703a 	wrctl	status,r5
    1658:	3801703a 	wrctl	status,r7
    165c:	0005883a 	mov	r2,zero
    1660:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
    1664:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
    1668:	f800283a 	ret

0000166c <alt_load>:
    166c:	deffff04 	addi	sp,sp,-4
    1670:	01000034 	movhi	r4,0
    1674:	01400034 	movhi	r5,0
    1678:	dfc00015 	stw	ra,0(sp)
    167c:	2106aa04 	addi	r4,r4,6824
    1680:	2946ba04 	addi	r5,r5,6888
    1684:	2140061e 	bne	r4,r5,16a0 <alt_load+0x34>
    1688:	01000034 	movhi	r4,0
    168c:	01400034 	movhi	r5,0
    1690:	21040804 	addi	r4,r4,4128
    1694:	29440804 	addi	r5,r5,4128
    1698:	2140121e 	bne	r4,r5,16e4 <alt_load+0x78>
    169c:	00000b06 	br	16cc <alt_load+0x60>
    16a0:	00c00034 	movhi	r3,0
    16a4:	18c6ba04 	addi	r3,r3,6888
    16a8:	1907c83a 	sub	r3,r3,r4
    16ac:	0005883a 	mov	r2,zero
    16b0:	10fff526 	beq	r2,r3,1688 <_gp+0xffff7be0>
    16b4:	114f883a 	add	r7,r2,r5
    16b8:	39c00017 	ldw	r7,0(r7)
    16bc:	110d883a 	add	r6,r2,r4
    16c0:	10800104 	addi	r2,r2,4
    16c4:	31c00015 	stw	r7,0(r6)
    16c8:	003ff906 	br	16b0 <_gp+0xffff7c08>
    16cc:	01000034 	movhi	r4,0
    16d0:	01400034 	movhi	r5,0
    16d4:	21069d04 	addi	r4,r4,6772
    16d8:	29469d04 	addi	r5,r5,6772
    16dc:	2140101e 	bne	r4,r5,1720 <alt_load+0xb4>
    16e0:	00000b06 	br	1710 <alt_load+0xa4>
    16e4:	00c00034 	movhi	r3,0
    16e8:	18c46004 	addi	r3,r3,4480
    16ec:	1907c83a 	sub	r3,r3,r4
    16f0:	0005883a 	mov	r2,zero
    16f4:	10fff526 	beq	r2,r3,16cc <_gp+0xffff7c24>
    16f8:	114f883a 	add	r7,r2,r5
    16fc:	39c00017 	ldw	r7,0(r7)
    1700:	110d883a 	add	r6,r2,r4
    1704:	10800104 	addi	r2,r2,4
    1708:	31c00015 	stw	r7,0(r6)
    170c:	003ff906 	br	16f4 <_gp+0xffff7c4c>
    1710:	00019d40 	call	19d4 <alt_dcache_flush_all>
    1714:	dfc00017 	ldw	ra,0(sp)
    1718:	dec00104 	addi	sp,sp,4
    171c:	00019d81 	jmpi	19d8 <alt_icache_flush_all>
    1720:	00c00034 	movhi	r3,0
    1724:	18c6aa04 	addi	r3,r3,6824
    1728:	1907c83a 	sub	r3,r3,r4
    172c:	0005883a 	mov	r2,zero
    1730:	18bff726 	beq	r3,r2,1710 <_gp+0xffff7c68>
    1734:	114f883a 	add	r7,r2,r5
    1738:	39c00017 	ldw	r7,0(r7)
    173c:	110d883a 	add	r6,r2,r4
    1740:	10800104 	addi	r2,r2,4
    1744:	31c00015 	stw	r7,0(r6)
    1748:	003ff906 	br	1730 <_gp+0xffff7c88>

0000174c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    174c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1750:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1754:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1758:	00019680 	call	1968 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    175c:	00019880 	call	1988 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1760:	d1a02317 	ldw	r6,-32628(gp)
    1764:	d1602417 	ldw	r5,-32624(gp)
    1768:	d1202517 	ldw	r4,-32620(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    176c:	dfc00017 	ldw	ra,0(sp)
    1770:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1774:	00013ec1 	jmpi	13ec <main>

00001778 <alt_printf>:
    1778:	defff204 	addi	sp,sp,-56
    177c:	2005883a 	mov	r2,r4
    1780:	dfc00a15 	stw	ra,40(sp)
    1784:	df000915 	stw	fp,36(sp)
    1788:	ddc00815 	stw	r23,32(sp)
    178c:	dd800715 	stw	r22,28(sp)
    1790:	dd400615 	stw	r21,24(sp)
    1794:	dd000515 	stw	r20,20(sp)
    1798:	dcc00415 	stw	r19,16(sp)
    179c:	dc800315 	stw	r18,12(sp)
    17a0:	dc400215 	stw	r17,8(sp)
    17a4:	dc000115 	stw	r16,4(sp)
    17a8:	d9400b15 	stw	r5,44(sp)
    17ac:	d9800c15 	stw	r6,48(sp)
    17b0:	d9c00d15 	stw	r7,52(sp)
    17b4:	04000944 	movi	r16,37
    17b8:	dd400b04 	addi	r21,sp,44
    17bc:	048018c4 	movi	r18,99
    17c0:	04c01e04 	movi	r19,120
    17c4:	05001cc4 	movi	r20,115
    17c8:	11000007 	ldb	r4,0(r2)
    17cc:	20003a26 	beq	r4,zero,18b8 <alt_printf+0x140>
    17d0:	24000226 	beq	r4,r16,17dc <alt_printf+0x64>
    17d4:	14400044 	addi	r17,r2,1
    17d8:	00001406 	br	182c <alt_printf+0xb4>
    17dc:	14400084 	addi	r17,r2,2
    17e0:	10800047 	ldb	r2,1(r2)
    17e4:	10003426 	beq	r2,zero,18b8 <alt_printf+0x140>
    17e8:	1400021e 	bne	r2,r16,17f4 <alt_printf+0x7c>
    17ec:	8009883a 	mov	r4,r16
    17f0:	00000e06 	br	182c <alt_printf+0xb4>
    17f4:	1480051e 	bne	r2,r18,180c <alt_printf+0x94>
    17f8:	a9000017 	ldw	r4,0(r21)
    17fc:	ad800104 	addi	r22,r21,4
    1800:	b02b883a 	mov	r21,r22
    1804:	00018e80 	call	18e8 <alt_putchar>
    1808:	00002906 	br	18b0 <alt_printf+0x138>
    180c:	14c0201e 	bne	r2,r19,1890 <alt_printf+0x118>
    1810:	adc00017 	ldw	r23,0(r21)
    1814:	ad400104 	addi	r21,r21,4
    1818:	b8000326 	beq	r23,zero,1828 <alt_printf+0xb0>
    181c:	05800704 	movi	r22,28
    1820:	00c003c4 	movi	r3,15
    1824:	00000306 	br	1834 <alt_printf+0xbc>
    1828:	01000c04 	movi	r4,48
    182c:	00018e80 	call	18e8 <alt_putchar>
    1830:	00001f06 	br	18b0 <alt_printf+0x138>
    1834:	1d84983a 	sll	r2,r3,r22
    1838:	15c4703a 	and	r2,r2,r23
    183c:	1000021e 	bne	r2,zero,1848 <alt_printf+0xd0>
    1840:	b5bfff04 	addi	r22,r22,-4
    1844:	003ffb06 	br	1834 <_gp+0xffff7d8c>
    1848:	070003c4 	movi	fp,15
    184c:	00c00244 	movi	r3,9
    1850:	b0001716 	blt	r22,zero,18b0 <alt_printf+0x138>
    1854:	e588983a 	sll	r4,fp,r22
    1858:	25c8703a 	and	r4,r4,r23
    185c:	2588d83a 	srl	r4,r4,r22
    1860:	19000236 	bltu	r3,r4,186c <alt_printf+0xf4>
    1864:	21000c04 	addi	r4,r4,48
    1868:	00000106 	br	1870 <alt_printf+0xf8>
    186c:	210015c4 	addi	r4,r4,87
    1870:	21003fcc 	andi	r4,r4,255
    1874:	2100201c 	xori	r4,r4,128
    1878:	213fe004 	addi	r4,r4,-128
    187c:	d8c00015 	stw	r3,0(sp)
    1880:	00018e80 	call	18e8 <alt_putchar>
    1884:	b5bfff04 	addi	r22,r22,-4
    1888:	d8c00017 	ldw	r3,0(sp)
    188c:	003ff006 	br	1850 <_gp+0xffff7da8>
    1890:	1500071e 	bne	r2,r20,18b0 <alt_printf+0x138>
    1894:	ad800017 	ldw	r22,0(r21)
    1898:	ad400104 	addi	r21,r21,4
    189c:	b1000007 	ldb	r4,0(r22)
    18a0:	20000326 	beq	r4,zero,18b0 <alt_printf+0x138>
    18a4:	b5800044 	addi	r22,r22,1
    18a8:	00018e80 	call	18e8 <alt_putchar>
    18ac:	003ffb06 	br	189c <_gp+0xffff7df4>
    18b0:	8805883a 	mov	r2,r17
    18b4:	003fc406 	br	17c8 <_gp+0xffff7d20>
    18b8:	dfc00a17 	ldw	ra,40(sp)
    18bc:	df000917 	ldw	fp,36(sp)
    18c0:	ddc00817 	ldw	r23,32(sp)
    18c4:	dd800717 	ldw	r22,28(sp)
    18c8:	dd400617 	ldw	r21,24(sp)
    18cc:	dd000517 	ldw	r20,20(sp)
    18d0:	dcc00417 	ldw	r19,16(sp)
    18d4:	dc800317 	ldw	r18,12(sp)
    18d8:	dc400217 	ldw	r17,8(sp)
    18dc:	dc000117 	ldw	r16,4(sp)
    18e0:	dec00e04 	addi	sp,sp,56
    18e4:	f800283a 	ret

000018e8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    18e8:	defffd04 	addi	sp,sp,-12
    18ec:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    18f0:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    18f4:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    18f8:	01000034 	movhi	r4,0
    18fc:	000f883a 	mov	r7,zero
    1900:	01800044 	movi	r6,1
    1904:	d80b883a 	mov	r5,sp
    1908:	2106b904 	addi	r4,r4,6884
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    190c:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    1910:	00019a00 	call	19a0 <altera_avalon_jtag_uart_write>
    1914:	00ffffc4 	movi	r3,-1
    1918:	10c00126 	beq	r2,r3,1920 <alt_putchar+0x38>
        return -1;
    }
    return c;
    191c:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    1920:	dfc00217 	ldw	ra,8(sp)
    1924:	dc000117 	ldw	r16,4(sp)
    1928:	dec00304 	addi	sp,sp,12
    192c:	f800283a 	ret

00001930 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    1930:	defffe04 	addi	sp,sp,-8
    1934:	dc000015 	stw	r16,0(sp)
    1938:	dfc00115 	stw	ra,4(sp)
    193c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1940:	0001a580 	call	1a58 <strlen>
    1944:	01000034 	movhi	r4,0
    1948:	000f883a 	mov	r7,zero
    194c:	100d883a 	mov	r6,r2
    1950:	800b883a 	mov	r5,r16
    1954:	2106b904 	addi	r4,r4,6884
#else
    return fputs(str, stdout);
#endif
#endif
}
    1958:	dfc00117 	ldw	ra,4(sp)
    195c:	dc000017 	ldw	r16,0(sp)
    1960:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1964:	00019a01 	jmpi	19a0 <altera_avalon_jtag_uart_write>

00001968 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1968:	deffff04 	addi	sp,sp,-4
    196c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
    1970:	00019dc0 	call	19dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1974:	00800044 	movi	r2,1
    1978:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    197c:	dfc00017 	ldw	ra,0(sp)
    1980:	dec00104 	addi	sp,sp,4
    1984:	f800283a 	ret

00001988 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
    1988:	00903004 	movi	r2,16576
    198c:	d0a02715 	stw	r2,-32612(gp)
    1990:	0080bef4 	movhi	r2,763
    1994:	10bc2004 	addi	r2,r2,-3968
    1998:	d0a02615 	stw	r2,-32616(gp)
    199c:	f800283a 	ret

000019a0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    19a0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    19a4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    19a8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    19ac:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    19b0:	2980072e 	bgeu	r5,r6,19d0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    19b4:	38c00037 	ldwio	r3,0(r7)
    19b8:	18ffffec 	andhi	r3,r3,65535
    19bc:	183ffc26 	beq	r3,zero,19b0 <_gp+0xffff7f08>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    19c0:	28c00007 	ldb	r3,0(r5)
    19c4:	20c00035 	stwio	r3,0(r4)
    19c8:	29400044 	addi	r5,r5,1
    19cc:	003ff806 	br	19b0 <_gp+0xffff7f08>

  return count;
}
    19d0:	f800283a 	ret

000019d4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    19d4:	f800283a 	ret

000019d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    19d8:	f800283a 	ret

000019dc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    19dc:	000170fa 	wrctl	ienable,zero
    19e0:	f800283a 	ret

000019e4 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    19e4:	213ffe84 	addi	r4,r4,-6
    19e8:	008003c4 	movi	r2,15
    19ec:	11001636 	bltu	r2,r4,1a48 <alt_exception_cause_generated_bad_addr+0x64>
    19f0:	200890ba 	slli	r4,r4,2
    19f4:	00800034 	movhi	r2,0
    19f8:	10868204 	addi	r2,r2,6664
    19fc:	2089883a 	add	r4,r4,r2
    1a00:	20800017 	ldw	r2,0(r4)
    1a04:	1000683a 	jmp	r2
    1a08:	00001a50 	cmplti	zero,zero,105
    1a0c:	00001a50 	cmplti	zero,zero,105
    1a10:	00001a48 	cmpgei	zero,zero,105
    1a14:	00001a48 	cmpgei	zero,zero,105
    1a18:	00001a48 	cmpgei	zero,zero,105
    1a1c:	00001a50 	cmplti	zero,zero,105
    1a20:	00001a48 	cmpgei	zero,zero,105
    1a24:	00001a48 	cmpgei	zero,zero,105
    1a28:	00001a50 	cmplti	zero,zero,105
    1a2c:	00001a50 	cmplti	zero,zero,105
    1a30:	00001a48 	cmpgei	zero,zero,105
    1a34:	00001a50 	cmplti	zero,zero,105
    1a38:	00001a48 	cmpgei	zero,zero,105
    1a3c:	00001a48 	cmpgei	zero,zero,105
    1a40:	00001a48 	cmpgei	zero,zero,105
    1a44:	00001a50 	cmplti	zero,zero,105
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    1a48:	0005883a 	mov	r2,zero
    1a4c:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    1a50:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    1a54:	f800283a 	ret

00001a58 <strlen>:
    1a58:	2005883a 	mov	r2,r4
    1a5c:	10c00007 	ldb	r3,0(r2)
    1a60:	18000226 	beq	r3,zero,1a6c <strlen+0x14>
    1a64:	10800044 	addi	r2,r2,1
    1a68:	003ffc06 	br	1a5c <_gp+0xffff7fb4>
    1a6c:	1105c83a 	sub	r2,r2,r4
    1a70:	f800283a 	ret
